[
{
    "model": "MArticles.category",
    "pk": 1,
    "fields": {
        "name": "WebDevelopment"
    }
},
{
    "model": "MArticles.category",
    "pk": 7,
    "fields": {
        "name": "DevOps"
    }
},
{
    "model": "MArticles.category",
    "pk": 8,
    "fields": {
        "name": "WebDeployment"
    }
},
{
    "model": "MArticles.category",
    "pk": 10,
    "fields": {
        "name": "AWS"
    }
},
{
    "model": "MArticles.category",
    "pk": 11,
    "fields": {
        "name": "Technology"
    }
},
{
    "model": "MArticles.category",
    "pk": 13,
    "fields": {
        "name": "Software"
    }
},
{
    "model": "MArticles.visitior",
    "pk": 3,
    "fields": {
        "ipaddress": "127.0.0.1"
    }
},
{
    "model": "MArticles.article",
    "pk": 1,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django Admin Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894563/mediafiles/Articles/djangoadmincheatsheet_tyav12.png",
        "description": "<p>Here is Django admin.py all possible(basic and advanced)&nbsp;configurations. We define a class that will inherit from the&nbsp;admin.ModelAdmin class to register Django models in advance defining exclude, list_display..etc. So that, When we visit the admin page, Features like prepopulated fields, Searching, Ordering, and so on can be observed.</p>\r\n\r\n<p>In <strong>admin.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">from .models import*\r\nfrom django.contrib import admin\r\n\r\n\r\n#Advanced Registry\r\nclass SuperArticleModel(admin.ModelAdmin):\r\n    exclude=('contenttype',)\r\n    list_display = ('title', 'id','published_date','last_updated','author',)\r\n    list_filter=['status','author']\r\n    search_fields=['title','description']\r\n    \r\nadmin.site.register(Article, SuperArticleModel)\r\n\r\nclass PLAdmin(admin.ModelAdmin):\r\n    list_display = ('title', 'thumbnail', 'slug', 'author')\r\n    prepopulated_fields = {'slug': ('title',), }\r\nadmin.site.register(ProgrammingLanguage, PLAdmin)\r\n\r\n\r\n#Mptt Commentmodel Registry\r\nfrom mptt.admin import MPTTModelAdmin\r\nadmin.site.register(AComment, MPTTModelAdmin)\r\n\r\n\r\n#Models register in single line by tuple\r\nadmin.site.register((Profile,Contact,EmailSubscription))</code></pre>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "django-admin-cheatsheet",
        "published_date": "2021-09-03T12:32:45Z",
        "last_updated": "2022-01-23T06:42:29.652Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 5,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django Python Command Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894563/mediafiles/Articles/djangoimportcheatsheet_osybdr.png",
        "description": "<p>Python is an&nbsp;advanced object-oriented programming language that is great for Machine learning, Automating stuff,&nbsp;and Building Web applications. Similarly, Django is a Python-based web framework that follows the MVT Design patterns which have become quite popular in the modern era.&nbsp; Below is the cheat sheet that can be referred to when you are working with projects. It can also be used for study purposes.</p>\r\n\r\n<p>All Python Command Cheatsheet is below:</p>\r\n\r\n<p>//Make folder<br />\r\nmkdir templates</p>\r\n\r\n<p>//remove folder file<br />\r\nrm folder</p>\r\n\r\n<p>//make file<br />\r\ntouch templates</p>\r\n\r\n<p>//make a file being outside the folder<br />\r\ntouch templates/base.html</p>\r\n\r\n<p>//get inside the template directory<br />\r\ncd templates</p>\r\n\r\n<p>//exits the current directory<br />\r\ncd..</p>\r\n\r\n<p>//Switching to Directories<br />\r\nD:</p>\r\n\r\n<p><br />\r\n//gives you info about version, license.<br />\r\npython&nbsp;</p>\r\n\r\n<p>//gives info about version only<br />\r\npython -v &nbsp;or python --version</p>\r\n\r\n<p>//tells you the location of python<br />\r\nwhich python&nbsp;</p>\r\n\r\n<p>//For Installing new versions and looking docs.<br />\r\nhttps://www.python.org/</p>\r\n\r\n<p>//Upgrade pip</p>\r\n\r\n<p>pip install --upgrade pip</p>\r\n\r\n<p><br />\r\n//When permission is denied<br />\r\npython -m pip install --user &lt;package&gt;</p>\r\n\r\n<p>//DJANGO VERSION DESCRIPTION<br />\r\npy -m django --version/django --version</p>\r\n\r\n<p>//command for installing django</p>\r\n\r\n<p>pip install django</p>\r\n\r\n<p>//command for upgrading any package using pip<br />\r\npip install &lt;package-name&gt; --upgrade &nbsp;<br />\r\nExample: pip install django --upgrade</p>\r\n\r\n<p>//You need to use the --upgrade or -U flag for upgrading.<br />\r\n//Alternatively, you can use python -m pip install -U Django.</p>\r\n\r\n<p>//Show Django project version<br />\r\npip show django</p>\r\n\r\n<p>//check your all pre-installed versions with python<br />\r\npip list</p>\r\n\r\n<p>//tells you the location of pip.<br />\r\nwhich pip</p>\r\n\r\n<p>py manage.py check --deploy</p>\r\n\r\n<p>//freeze all of your pip packages in the requirements.txt file<br />\r\npip freeze &gt; requirements.txt</p>\r\n\r\n<p>//install all&nbsp;packages of requirements.txt file<br />\r\npip install -r requirements.txt</p>\r\n\r\n<p>Things you should ensure:<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You&#39;re in the same folder as the file when running this command.</p>\r\n\r\n<p><br />\r\n//Copy all of your static files into your STATIC_ROOT.<br />\r\npy manage.y collectstatic</p>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "django-python-command-cheatsheet",
        "published_date": "2021-10-17T08:59:55.653Z",
        "last_updated": "2022-01-23T13:56:30.730Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 6,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Virtual Environment with pipenv",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894565/mediafiles/Articles/VirtualEnvironmentWithPipenv_zvawq9.png",
        "description": "<p>Pipenv is a tool used to manage the packages required for a Python project. With this Python package you can:<br />\r\n-&gt; Automatically create or delete the virtual environment.<br />\r\n-&gt; Install, uninstall, and update packages that store the desired versions.<br />\r\n-&gt; Quickly set up Python operating system.<br />\r\n-&gt; Have a list of installed packages and compatible versions.<br />\r\nIf you use Pipenv for your projects, you will have two special files in the root folder, both of which are automatically generated and converted.<br />\r\nThese are:<br />\r\nPipfile: A file that specifies packages installed in your virtual environment for development and use.<br />\r\nPipfile.lock: With Pipenv, it is very easy to work on projects with other developers using the same packages and versions as it provides files that contain all that information.</p>\r\n\r\n<p>Developers should simply use the command to have the same location on their computer. The great thing about Pipenv is that When you create a virtual environment with Pipenv if your project contains the required file.txt it will automatically lock dependencies in the Pipfile.lock and&nbsp;install it in Pipfile.</p>\r\n\r\n<p>It was built because of the shortcomings of thousands of virtualenv.<br />\r\nTo install pipenv, you need to install the pip first.</p>\r\n\r\n<p>Step 1: Initially, Install the pipenv package with a pipe if you have not already done so.</p>\r\n\r\n<pre>\r\n<code>pip install pipenv</code></pre>\r\n\r\n<p>Step 2: Create a visual environment with the following command</p>\r\n\r\n<pre>\r\n<code>pipenv --python 3.9.6 or pipenv install</code></pre>\r\n\r\n<p>Note: It will create a virtual environment with python using the Python version that you have already installed on your Computer.<br />\r\nVirutal Environment Default Location: -C: \\ Users \\ &lt;username&gt; \\. Virtualevs \\</p>\r\n\r\n<p>This is what the newly built Pipfile looks like:</p>\r\n\r\n<pre>\r\n<code>[[source]]\r\nurl = \"https://pypi.org/simple\"\r\nverify_ssl = true\r\nname = \"pypi\"\r\n\r\n[packages]\r\ndjango-drip-campaigns = \"*\"\r\n\r\n[dev-packages]\r\n\r\n[requires]\r\npython_version = \"3.8\"</code></pre>\r\n\r\n<p><br />\r\nWhat you need to know: - &gt;&gt; The installed packages needed to be able to cross your project fall under [Packages] regularly.</p>\r\n\r\n<p>To remove the virtual environment you created, use the following command</p>\r\n\r\n<pre>\r\n<code>pipenv --rm</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To activate the virtual environment, just run:</p>\r\n\r\n<pre>\r\n<code>pipenv shell</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>To deactivate</p>\r\n\r\n<pre>\r\n<code>exit</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Some Practical Commands</p>\r\n\r\n<p>&nbsp;1. Generates&nbsp;a requirements.txt file with Pipenv</p>\r\n\r\n<pre>\r\n<code>pipenv lock --requirements &gt; requirements.txt</code></pre>\r\n\r\n<p><br />\r\n2. Install the recent&nbsp;version of the package.</p>\r\n\r\n<pre>\r\n<code>pipenv install &lt;package name&gt;</code></pre>\r\n\r\n<p><br />\r\n3. Install a specified version of a package.</p>\r\n\r\n<pre>\r\n<code>pipenv install &lt;package name&gt;==&lt;package version&gt;</code></pre>\r\n\r\n<p><br />\r\n4. Uninstall a package.</p>\r\n\r\n<pre>\r\n<code>pipenv uninstall &lt;package name&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n.</p>",
        "author": 1,
        "slug": "virtual-environment-with-pipenv",
        "published_date": "2021-09-14T09:20:51Z",
        "last_updated": "2022-01-23T13:56:18.656Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            1
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 7,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Virtual Environment with virtualenv",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636896357/mediafiles/Articles/virtualenvironmentwithvirtualenv_lg3elr.png",
        "description": "<p>Open Command Prompt in a directory that you want to set up a Virtual Environment for your project.<br />\r\nStep1: Install virtualenv package</p>\r\n\r\n<pre>\r\n<code>pip install virtualenv ß</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step2: Run the command</p>\r\n\r\n<pre>\r\n<code>python -m venv environment_name</code></pre>\r\n\r\n<p>to create a virtual environment</p>\r\n\r\n<p><br />\r\n&nbsp; &nbsp;i.e E:\\Django\\VirtualEnvironment&gt;python -m venv VirtualEnv&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Or<br />\r\n&nbsp; &nbsp;i.e E:\\Django\\VirtualEnvironment&gt;virtualenv VirtualEnv&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\nTO ACTIVATE VIRTUAL ENVIRONMENT<br />\r\n&nbsp;Virtual\\Scripts\\activate.bat &nbsp;&nbsp;</p>\r\n\r\n<p><br />\r\nStep4: Install a desired Django framework version</p>\r\n\r\n<pre>\r\n<code>pip install django&lt;version_name&gt;</code></pre>\r\n\r\n<p>//SETUP DJANGO PROJECT INSIDE VIRTUAL ENVIRONMENT FOLDER<br />\r\nStep5: Start the Django project by running the following command</p>\r\n\r\n<pre>\r\n<code>django-admin startproject Project_name</code></pre>\r\n\r\n<p>//Open VsCode<br />\r\nStep5: code.</p>\r\n\r\n<p><br />\r\nStep6:Run the following command as administrator if this is your first project with virtualenv.</p>\r\n\r\n<pre>\r\n<code>set-ExecutionPolicy Unrestricted</code></pre>\r\n\r\n<p>Note: To run the .as1 file, We have to change the Execution policy running Windows PowerShell as administrator</p>\r\n\r\n<p>Step6:We didn&#39;t install pip while installing python in Virtual Environment. So, We now install pip for installing packages for the Django project by running the command:</p>\r\n\r\n<pre>\r\n<code>python -m ensurepip --upgrade</code></pre>\r\n\r\n<p>To activate the virtual environment</p>\r\n\r\n<pre>\r\n<code>activate</code></pre>\r\n\r\n<p>For Reactivating, Specify the path.For eg</p>\r\n\r\n<pre>\r\n<code>e:/Django/VirtualEnvironment/Virtual/Scripts/Activate.ps1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>Summary</strong></h2>\r\n\r\n<p>We are creating a virtual environment and then using pip to install packages, and then manually calling pip freeze to save what&#39;s been installed. What if you didn&rsquo;t have to make this a two-part process? What if you could merge pip with <strong>virtualenv</strong>.This is possible through <strong>pipen</strong>v. That&#39;s one of&nbsp;the major reasons why it got replaced by <strong>pipenv</strong>. But, there are still many developers who are still using it. I will write an article on it. Stay tuned!</p>",
        "author": 1,
        "slug": "virtual-environment-with-virtualenv",
        "published_date": "2021-11-05T09:22:02Z",
        "last_updated": "2021-11-28T09:01:41.224Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 8,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Heroku Postgres Backup and load Data",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894564/mediafiles/Articles/herokupostgresBackup_drxfgn.png",
        "description": "<p>In this article, I am gonna tell you how you can backup&nbsp;data of production level, load it to local development, and update&nbsp;the data back to the production level. I am assuming you already have basic knowledge about fixtures and json files&nbsp;that will be used to do so.</p>\r\n\r\n<h2><strong>Backup Data of Production level</strong></h2>\r\n\r\n<p><strong>Step1</strong>: At First, log in&nbsp;to Heroku CLI.</p>\r\n\r\n<pre>\r\n<code>heroku login</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#2c3e50\"><strong>Step2</strong>: Run the command to create a backup of the data</span></p>\r\n\r\n<pre>\r\n<code>heroku pg:backups:capture</code></pre>\r\n\r\n<p><span style=\"color:#2c3e50\"><span style=\"background-color:#ffffff\">You can run a command</span></span>&nbsp;</p>\r\n\r\n<pre>\r\n<code>heroku pg:backups:info </code></pre>\r\n\r\n<p><span style=\"color:#2c3e50\"><span style=\"background-color:#ffffff\">to check out information about the backup.</span></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#2c3e50\"><strong>Step3</strong>: Run the following command.which&nbsp;will create latest.dump file.</span></p>\r\n\r\n<pre>\r\n<code>heroku pg:backups:download</code></pre>\r\n\r\n<p><br />\r\n<span style=\"color:#2c3e50\"><strong>Step4</strong>:Now, We dump the file into our local Postgres database by the following command.</span></p>\r\n\r\n<pre>\r\n<code>pg_restore --verbose --clean --no-acl --no-owner -h localhost -U myuser -d mydb latest.dump</code></pre>\r\n\r\n<p><span style=\"color:#2c3e50\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Note: Make sure, You have open pg admin. Otherwise, this won&#39;t work.</span></p>\r\n\r\n<p>Now, Run the local server. You can see production-level data Is shown on the server.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>Migrate local-level data to Production level</strong></h2>\r\n\r\n<p><strong>Step1:</strong>&nbsp;We will dump all local data into json file by running the command</p>\r\n\r\n<pre>\r\n<code>python manage.py dumpdata --format json --indent 4 --exclude auth.permission --exclude contenttypes &gt; data.json</code></pre>\r\n\r\n<p><span style=\"background-color:#ffffff\">Note:data.json encoding must be set to utf-8. I&nbsp;have excluded auth.permission and contenttypes&nbsp;because content type gets collided with unrelated foreign keys. These raise errors&nbsp;in loading data to the Heroku PostgreSQL database. So make sure of it.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step2</strong>: Now, add the json file(Assuming you already have set up a git repository)</p>\r\n\r\n<pre>\r\n<code>git add .</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step3</strong>: Now, make a commit for the file which will be later tracked in the local repository.</p>\r\n\r\n<pre>\r\n<code>git commit -m \"Project Up to Date\"</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step4</strong>: Then, push it to the git repository.</p>\r\n\r\n<pre>\r\n<code>git heroku push &lt;branch name&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step5</strong>: Now, load the json file with Heroku.</p>\r\n\r\n<pre>\r\n<code>heroku run python manage.py loaddata data.json</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n<span style=\"color:#000000\"><strong><span style=\"background-color:#ffffff\">SOME USEFUL COMMANDS</span></strong></span></p>\r\n\r\n<p><span style=\"color:#000000\"><span style=\"background-color:#ffffff\">//IN ORDER TO DUMP/BACKUP DATA FROM DATABASE INTO JSON FILE.</span></span></p>\r\n\r\n<pre>\r\n<code>python manage.py dumpdata &gt; data.json</code></pre>\r\n\r\n<p><span style=\"color:#000000\"><span style=\"background-color:#ffffff\">//TO DUMP DATA OF A PARTICULAR DJANGO APP</span></span></p>\r\n\r\n<pre>\r\n<code>python manage.py dumpdata MArticlesß&gt; data.json</code></pre>\r\n\r\n<p><span style=\"color:#000000\"><span style=\"background-color:#ffffff\">//TO DUMP DATA OF PARTICULAR DJANGO TABLE OF AN APP</span></span></p>\r\n\r\n<pre>\r\n<code>python manage.py dumpdata Marticles.Comment &gt; data.json </code></pre>\r\n\r\n<p><span style=\"color:#000000\"><span style=\"background-color:#ffffff\">&nbsp; &nbsp;Note: Comment is a model in Marticles app</span></span></p>\r\n\r\n<p><span style=\"color:#000000\"><span style=\"background-color:#ffffff\">//TO EXCLUDE SOME TABLE FROM BEING DUMP</span></span></p>\r\n\r\n<pre>\r\n<code>python manage.py dumpdata --format json --indent 4 --exclude Blog.category&gt;data.json</code></pre>\r\n\r\n<p><span style=\"color:#000000\"><span style=\"background-color:#ffffff\">//TO GET DATA IN READABLE FORMAT</span></span></p>\r\n\r\n<pre>\r\n<code>python manage.py dumpdata --indent 4&gt;data.json</code></pre>\r\n\r\n<p><span style=\"color:#000000\"><span style=\"background-color:#ffffff\">//FLUSH ENTIRE DATA</span></span></p>\r\n\r\n<pre>\r\n<code>py manage.py flush</code></pre>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "heroku-postgres-backup-and-load-data",
        "published_date": "2021-10-19T16:12:33.461Z",
        "last_updated": "2022-05-13T08:03:02.200Z",
        "total_views": 1,
        "featured": false,
        "status": "published",
        "category": [
            1
        ],
        "views": [
            3
        ],
        "bookmarks": [
            1
        ]
    }
},
{
    "model": "MArticles.article",
    "pk": 9,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Common Photoshop Shortuct keys",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894564/mediafiles/Articles/shortcutkeysinPhotoshop_kf2jj3.png",
        "description": "<p><strong>Adobe Photoshop</strong> is a&nbsp; powerful raster graphics editing software&nbsp;developed and published by Adobe Inc. for Windows and macOS. After reading this article, You&#39;ll know the most common Photoshop&nbsp;shortcut keys which can accelerate your work.</p>\r\n\r\n<p>Depending on which type of computer you have, There are keys with different names but does the same functionality&nbsp;which is as&nbsp; follows:</p>\r\n\r\n<table align=\"left\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"width:500px\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th scope=\"col\"><strong>macOS</strong></th>\r\n\t\t\t<th scope=\"col\"><strong>Windows</strong></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">Command</td>\r\n\t\t\t<td style=\"text-align:center\">Ctrl</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">Option</td>\r\n\t\t\t<td style=\"text-align:center\">Alt</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center\">Delete</td>\r\n\t\t\t<td style=\"text-align:center\">Backspace</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><br />\r\n<br />\r\n<br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;Below are the most common Photoshop Shortcut keys&nbsp; :&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">1) Ctrl</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;A</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Select the&nbsp;layer/object</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">2)Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;D </span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Deselect all layer(s)</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">3) Shift&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Control&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;I&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Select the inverse of the layer.</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">4)Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Alt&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;A</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Select all layers</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">5) Ctrl</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Shift&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;E</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Merge all layers</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">6) Alt&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;.&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Select top layer</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">7) Alt&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;,&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Select bottom layer</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">8) Shift&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Ctrl</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;+&nbsp;</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">N&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Create a new layer</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">9) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;G&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Group selected layers</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">10) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Shift&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;G</span></strong><em><span style=\"font-family:&quot;inherit&quot;,serif\"><strong>&nbsp;</strong></span></em><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Ungroup selected layers</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">11) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;E</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Merge and flatten selected layers</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">12) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Shift&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Alt&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;E&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Combine all layers into a new layer&nbsp;</span><em><span style=\"font-family:&quot;inherit&quot;,serif\">on top of&nbsp;&nbsp;</span></em><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">the other layers. Note: </span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">13) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Alt + Mouse Drag </span></strong><span style=\"font-family:&quot;inherit&quot;,serif\">or</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;Ctrl + J</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Duplicate layer</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">14) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+</span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;T</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= activate Transform property of layer/object.</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">15) Ctrl&nbsp; + &nbsp;</span></strong><strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">Z</span></strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;</span><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Redo</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">16) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+ <strong>Alt+ Z</strong></span><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Undo one by one</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">17) Ctrl + &nbsp;</span></strong><strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+ or&nbsp; Alt&nbsp;+ MouseWheelUp</span></strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;</span><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= = Zoom In</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">18) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+ <strong>-</strong></span><strong><span style=\"font-family:&quot;inherit&quot;,serif\">&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;</span><strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">or&nbsp; Alt&nbsp;+ MouseWheelDown&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">=&nbsp; Zoom Out</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">19)&nbsp;</span><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">Alt&nbsp;+ MouseWheelUp</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= shift right&nbsp;the layer</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">20) </span><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">Alt&nbsp;+ MouseWheelDown&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= shift left&nbsp;the layer</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">21)&nbsp; Press E/B</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Eraser/Brush tool </span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\"><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Note:&nbsp; <span style=\"background-color:#ecf0f1\">{</span> </strong>and<strong>&nbsp;&nbsp;<span style=\"background-color:#ecf0f1\">}</span>&nbsp;&nbsp;</strong>for Eraser/Brush Size control</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">22) Ctrl&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+ <strong>R</strong></span><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Ruler</span></span></span></span></h5>\r\n\r\n<h5><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">22) Shift+Alt&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">+ <strong>Mouse Left button hold and drag</strong></span><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">&nbsp;= Uniform Scaling</span></span></span></span></h5>\r\n\r\n<p><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">23) Ctrl&nbsp; + S&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Save&nbsp;</span></span></span></span></p>\r\n\r\n<p><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><strong><span style=\"font-family:&quot;inherit&quot;,serif\">24)&nbsp; Shift + Ctrl&nbsp; + &nbsp;S&nbsp;</span></strong><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">= Save&nbsp; as</span></span></span></span></p>\r\n\r\n<p><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\"><strong>25)</strong> <strong>Press F</strong> = Enter/Exit fullscreen</span></span></span></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:12px\"><span style=\"color:#000000\"><span style=\"font-family:Calibri,sans-serif\"><span style=\"font-family:&quot;Helvetica&quot;,sans-serif\">That&#39;s all for this article</span></span></span></span></p>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "common-photoshop-shortuct-keys",
        "published_date": "2021-10-20T08:40:04.996Z",
        "last_updated": "2022-01-23T13:56:48.788Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            13
        ],
        "views": [],
        "bookmarks": [
            1
        ]
    }
},
{
    "model": "MArticles.article",
    "pk": 10,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django Signal Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894564/mediafiles/Articles/djangosignalcheatsheet_cza4vu.png",
        "description": "<p>Django is a Python-based web framework that follows the MVT Design patterns which have become quite popular in the modern era.&nbsp; Below is the cheat sheet that can be referred to when you are working with projects. It can also be used for study purpose</p>\r\n\r\n<pre>\r\n<code>from typing import Tuple\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import User\r\nfrom django.urls import reverse\r\nfrom django.db.models.fields import DecimalField\r\n\r\nfrom django.dispatch import receiver\r\nfrom django.db.models.signals import post_save\r\n\r\n\r\nclass Profile(models.Model):\r\n    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True) #cascade is for deleting the customer\r\n    first_name = models.CharField(max_length=10, null=True)\r\n    second_name=models.CharField(max_length=10,null=True)\r\n    email = models.EmailField(max_length=70, null=True,blank=True)\r\n\r\n    def __str__(self):\r\n        return str(self.user)\r\n\r\n@receiver(post_save, sender=User)\r\ndef create_profile(sender, instance,created,**kwargs):#Signal receivers must accept keyword arguments (**kwargs).\r\n    if created:\r\n        Profile.objects.create(user=instance)       \r\n\r\n@receiver(post_save, sender=Profile)\r\ndef update_or_create_seller(sender, instance, created, **kwargs):\r\n    if created:#if Profile is created also create seller\r\n        Seller.objects.create(\r\n            user=instance, \r\n            first_name=instance.first_name,\r\n            second_name=instance.second_name,\r\n            email=instance.email\r\n        )\r\n    else:  #Ifprofile is updated update seller\r\n        seller = Seller.objects.get(user=instance)\r\n        seller.user=instance\r\n        seller.first_name = instance.first_name\r\n        seller.second_name = instance.second_name\r\n        seller.email = instance.email\r\n        seller.save()    \r\n\r\n\r\n\r\nclass Seller(models.Model):\r\n    user = models.OneToOneField(Profile, on_delete=models.CASCADE, null=True, blank=True) #cascade is for deleting the customer\r\n    first_name = models.CharField(max_length=10, null=True)\r\n    second_name=models.CharField(max_length=10,null=True)\r\n    email = models.EmailField(max_length=70, null=True,blank=True)\r\n    auth_token = models.CharField(max_length=100,null=True )\r\n    is_verified = models.BooleanField(default=False)        \r\n\r\n    def __str__(self):\r\n        return str(self.user)\r\n#unless you define related_name in your OneToOneField, Django will use lowercased model name to #access related object. So, instance.user.seller should work.</code></pre>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "django-signal-cheatsheet",
        "published_date": "2021-10-27T06:49:07.900Z",
        "last_updated": "2021-12-14T15:33:48.604Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 11,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django Model Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636895478/mediafiles/Articles/djangomodelcheatsheet_d1jsvx.png",
        "description": "<p>Django is a Python-based web framework that follows the MVT Design patterns which have become quite popular in the modern era. Every model instance we create leads to the creation of a 2D table&nbsp; Below is the cheat sheet that can be referred to when you are working with projects.</p>\r\n\r\n<p>In <strong>models.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">from typing import Tuple\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import User\r\nfrom django.urls import reverse\r\nfrom django.db.models.fields import DecimalField\r\nfrom django.dispatch import receiver\r\n\r\nfrom taggit.managers import TaggableManager\r\n\r\nfrom django.db.models.signals import post_save\r\n\r\nfrom django.utils import timezone\r\nclass Post (models.Model):\r\n\t#we have defined a custom manager that can give all the objects that are specific to something\r\n\t#i.e Post.newmanager.all() instead of Post.objects.all() \r\n\t\tclass NewManager(models.Manager):\r\n\t\t\tdef get_queryset(self):\r\n\t\t\t\treturn super().get_queryset() .filter(status='published')\r\n\r\n\t\toptions = (\r\n\t\t('draft', 'Draft'),\r\n\t\t('published', 'Published'),\r\n\t\t)\r\n\r\n\t\ttitle = models.CharField(max_length=250)\r\n\r\n\t\t#verbose_name is a name that's gonna be shown in database model see django admin\r\n\t\texcerpt = models.TextField(null=True,verbose_name=\"Short Text\")\r\n\r\n\t\t#Django has a unique_for_date property you can set when adding a SlugField to your model. \r\n\t\t#This causes the slug to be unique only for the Date of the field you specify\r\n\t\tslug = models.SlugField(max_length=250, unique=True,unique_for_date='publish')\r\n                publish_date = models.DateField(default = datetime.date.today)  \r\n                last_updated=models.DateTimeField(default=timezone.now)\r\n\t\tauthor = models.ForeignKey (User, on_delete=models.CASCADE, related_name='blog_posts')\r\n\t\t#now through a custom defined related_name, it becomes post.blog_posts_set.all()    \r\n\t\ttags = TaggableManager()\r\n\t\tcontent = models.TextField()\r\n\t\tstatus = models.CharField(max_length=10, choices=options, default='draft')\r\n\r\n\t\tobjects = models.Manager() #default manager\r\n\r\n\t\tnewmanager = NewManager() #custom manager\r\n\r\n\r\n\t\tclass Meta:\r\n\t\t\tordering = ('-publish',)\r\n                        db_table='post'\r\n                        unique_together = (('slug','category'),)\r\n\r\n\t\tdef __str__(self):\r\n\t\t\treturn self.title\r\n\r\nclass Books(models.Model):\r\n\tname=models.CharField(null=True,verbose_name=\"Namei\",max_length=100)\r\n\tbook_id=models.CharField(null=True,unique=True,verbose_name=\"bookeenId\",max_length=100)\r\n\tcoupon=models.IntegerField(default=0)\r\n\r\nclass Profile(models.Model):\r\n\tuser = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True) #cascade is for deleting the customer\r\n\tfirst_name = models.CharField(max_length=10, null=True)\r\n\tsecond_name=models.CharField(max_length=10,null=True)\r\n\temail = models.EmailField(max_length=70, null=True,blank=True)\r\n\r\n\tdef __str__(self):\r\n\t\treturn str(self.user)\r\n\r\n@receiver(post_save, sender=User)\r\ndef create_profile(sender, instance,created,**kwargs):#Signal receivers must accept keyword arguments (**kwargs).\r\n\tif created:\r\n\t\tProfile.objects.create(user=instance)       \r\n\r\n@receiver(post_save, sender=Profile)\r\ndef update_or_create_seller(sender, instance, created, **kwargs):\r\n\tif created:#if Profile is created also create seller\r\n\t\tSeller.objects.create(\r\n\t\t\tuser=instance, \r\n\t\t\tfirst_name=instance.first_name,\r\n\t\t\tsecond_name=instance.second_name,\r\n\t\t\temail=instance.email\r\n\t\t)\r\n\telse:  #Ifprofile is updated update seller\r\n\t\tseller = Seller.objects.get(user=instance)\r\n\t\tseller.user=instance\r\n\t\tseller.first_name = instance.first_name\r\n\t\tseller.second_name = instance.second_name\r\n\t\tseller.email = instance.email\r\n\t\tseller.save()    \r\n\r\n\r\nclass Seller(models.Model):\r\n\tuser = models.OneToOneField(Profile, on_delete=models.CASCADE, null=True, blank=True) #cascade is for deleting the customer\r\n\tfirst_name = models.CharField(max_length=10, null=True)\r\n\tsecond_name=models.CharField(max_length=10,null=True)\r\n\temail = models.EmailField(max_length=70, null=True,blank=True)\r\n\tauth_token = models.CharField(max_length=100,null=True )\r\n\tis_verified = models.BooleanField(default=False)        \r\n\r\n\tdef __str__(self):\r\n\t\treturn str(self.user)\r\n\r\nclass Customer(models.Model):\r\n\tfirst_name = models.CharField(max_length=100,unique=True)\r\n\tlast_name = models.CharField(max_length=100,unique=True)\r\n\tage = models.IntegerField(null=True)\r\n\tclass Meta:\r\n\t\tindexes = [\r\n\t\t\tmodels.Index(fields=['last_name', 'first_name']),\r\n\t\t\tmodels.Index(fields=['first_name'], name='first_name_idx'),\r\n\t\t]\r\n\t\tconstraints = [\r\n\t\t\tmodels.CheckConstraint(check=models.Q(age__gte=18), name='age_gte_18'),\r\n\t\t\t#if age is below 18,Django throws an error\r\n\t\t]\r\n\r\n# Create your models here.\r\nclass Contact(models.Model):\r\n\tname=models.CharField(null=True,max_length=10)\r\n\temail=models.EmailField(null=True,max_length=40)\r\n\ttitle=models.CharField(null=True,max_length=10)\r\n\turl=models.CharField(null=True,max_length=50)\r\n\tslug=models.SlugField(null=True,max_length=100)\r\n\tdescription=models.CharField(null=True,max_length=100)\r\n\t \r\n\tdef __str__(self):\r\n\t\treturn \"New Message from \"+ self.name  \r\n\r\n\tdef get_absolute_url(self):\r\n\t\treturn  reverse('Forms:contact-details',kwargs={'slug':self.slug,'pk':self.pk})   \r\n\t\r\nclass AllForm(models.Model):\r\n\tTYPE_CHOICES = (\r\n\t\t('MALE', 'MALE'),\r\n\t\t('FEMALE', 'FEMALE'),                           \r\n\t)   \r\n\tgender=models.CharField(max_length=20, choices=TYPE_CHOICES,null=True)   \r\n\tname=models.CharField(null=True,max_length=10)\r\n\temail=models.EmailField(null=True,max_length=40)\r\n\tcomplete = models.BooleanField(null=True) \r\n\t\r\n\t\r\n\tage= models.IntegerField(null=True, blank=True)\r\n\tprice = models.DecimalField(max_digits=7, decimal_places=2)\r\n\t\r\n\tfile=models.FileField(upload_to=\"\",null=True)\r\n\r\n\r\nimport uuid\r\nfrom django.db import models\r\n\r\nclass Transaction(models.Model):\r\n    name = models.CharField(max_length=50,null=True)\r\n    serialkey = models.UUIDField(primary_key = True,default = uuid.uuid4,editable = False)\r\n    published_date = models.DateTimeField(auto_now_add = True)\r\n    last_updated = models.DateTimeField(auto_now = True)\r\n \r\n\r\n\r\n\r\n\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "django-model-cheatsheet",
        "published_date": "2021-10-01T06:51:09Z",
        "last_updated": "2021-11-28T09:08:44.648Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": [
            1
        ]
    }
},
{
    "model": "MArticles.article",
    "pk": 12,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django Import Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894563/mediafiles/Articles/djangoimportcheatsheet_osybdr.png",
        "description": "<p>In python, We can import Class modules, Variables, functions,&nbsp;etc from another file/folder or package within a file. What you need to at least know about&nbsp;the Python package is, It always has an __init__.py.&nbsp;Below is the cheat sheet that can be referred to when you are working with projects.</p>\r\n\r\n<pre>\r\n<code class=\"language-python\">#IMPORT DEFAULT USER\r\nfrom django.contrib.auth.models import User\r\n\r\n#IMPORT TIMEZONE\r\nfrom django.utils import timezone\r\n\r\n#DJANGO URLS\r\nfrom django.urls import reverse\r\n\r\n#DJANGO GENERIC VIEWS\r\nfrom django.views.generic import TemplateView, ListView, UpdateView\r\n\r\n#DJANGO HTTP\r\nfrom django.http import JsonResponse, HttpResponse, HttpResponseRedirect\r\n\r\n#DJANGO SHORTCUTS\r\nfrom django.shortcuts import render, reverse, redirect, get_object_or_404, HttpResponseRedirect\r\n\r\n\r\n#DJANGO SIGNALS\r\nfrom django.db.models.signals import post_save\r\nfrom django.dispatch import receiver\r\n\r\n\r\n#DJANGO FORMS\r\nfrom django import forms\r\nfrom django.contrib.auth.forms import UserCreationForm\r\nfrom django.contrib.auth.models import User\r\n\r\n\r\n#DJANGO  AUTHENTICATION\r\nfrom django.contrib.auth import login, authenticate\r\n\r\n#DJANGO PAGINATOR\r\nfrom django.core.paginator import Paginator, EmptyPage, PageNotAnInteger\r\n\r\n</code></pre>",
        "author": 1,
        "slug": "django-import-cheatsheet",
        "published_date": "2021-10-27T06:53:37Z",
        "last_updated": "2021-11-28T08:24:07.874Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            1
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 13,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django MessageFrameWork CheatSheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894564/mediafiles/Articles/djangomessagescheatsheet_lqhdom.png",
        "description": "<p>Django has a messages framework that can be used for displaying messages when an event takes place.&nbsp; Below is the cheat sheet that can be referred to when you are working with messages. It can also be used for study purposes.</p>\r\n\r\n<p>In index.html</p>\r\n\r\n<pre>\r\n<code class=\"language-html\">  &lt;div class=\"row\"&gt;\r\n    {% for message in messages  %}    \r\n    {% if message.tags == \"success\" %}        \r\n    &lt;div class=\"{{ message.tags }} \" style=\"background-color: rgb(157, 249, 18,.5);text-align: center; padding:1rem; color: white;\" role=\"alert\"&gt;\r\n          &lt;strong&gt;Message : {{ message }}&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n    &lt;br&gt;\r\n    {% endif %}\r\n\r\n    {% if message.tags == \"error\" %}        \r\n    &lt;div class=\"{{ message.tags }} \" style=\"background-color: rgba(255, 7, 7, 0.92);text-align: center; padding:1rem; color: white;\" role=\"alert\"&gt;\r\n          &lt;strong&gt;Message : {{ message }}&lt;/strong&gt;\r\n    &lt;/div&gt;\r\n    &lt;br&gt;\r\n    {% endif %}\r\n\r\n    {% endfor %}   \r\n    &lt;div class=\"col-sm-12\"&gt;\r\n    &lt;main&gt;\r\n      &lt;br&gt;&lt;br&gt;\r\n      &lt;h2 class=\"text-center\"&gt;Contact Us&lt;/h2&gt;\r\n      &lt;br&gt;\r\n\r\n      &lt;form action=\"{% url 'Contact_Us' %}\" autocomplete=\"on\" method=\"post\"&gt;  \r\n      {% csrf_token %}\r\n        &lt;div class=\"form-group textcolor\"&gt;\r\n          &lt;label style=\"color: white;\" for=\"name\"&gt;Name&lt;/label&gt;\r\n          &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required autofocus&gt;\r\n          &lt;br&gt;\r\n        &lt;/div&gt;\r\n      \r\n\r\n          &lt;label style=\"color: white;\" for=\"email\"&gt;Email address&lt;/label&gt;\r\n          &lt;input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" aria-describedby=\"emailHelp\" required&gt;\r\n          &lt;small  style=\"color: rgb(169, 169, 169);\" id=\"emailHelp\" class=\"form-text\"&gt;You are requested to provide a Valid Email.&lt;/small&gt;\r\n          &lt;br&gt;\r\n\r\n        &lt;br&gt;\r\n\r\n        &lt;div class=\"form-group textcolor\"&gt;\r\n          &lt;label style=\"color: white;\" for=\"title\"&gt;Title:&lt;/label&gt;\r\n          &lt;input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" required&gt;\r\n          &lt;br&gt;\r\n        &lt;/div&gt;\r\n      \r\n\r\n\r\n        &lt;div class=\"form-group textcolor\"&gt;\r\n          &lt;label style=\"color: white;\" for=\"content\"&gt;Description :&lt;/label&gt;\r\n          &lt;textarea class=\"form-control\" name=\"content\" id=\"content\" cols=\"30\" rows=\"5\" required&gt;&lt;/textarea&gt;\r\n          &lt;br&gt;\r\n        &lt;/div&gt;\r\n      \r\n        &lt;br&gt;\r\n        &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\r\n        &lt;br&gt;\r\n        &lt;br&gt;  &lt;br&gt;&lt;br&gt;\r\n      &lt;/form&gt;\r\n    &lt;/main&gt;\r\n    \r\n    &lt;/div&gt;\r\n  &lt;/div&gt;</code></pre>",
        "author": 1,
        "slug": "django-messageframework-cheatsheet",
        "published_date": "2021-08-04T06:56:40Z",
        "last_updated": "2021-11-28T08:27:58.346Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 14,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django Settings Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894564/mediafiles/Articles/djangosettingscheatsheet_j43wso.png",
        "description": "<p>Django is a Python-based web framework that follows the MVT Design patterns which have become quite popular in the modern era.&nbsp;Below is the cheat sheet that can be referred to when you are working with projects. It can also be used for study purposes.</p>\r\n\r\n<p>In <strong>settings.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">\r\nALLOWED_HOSTS = ['.herokuapp.com','localhost','127.0.0.1']\r\n\r\nMIDDLEWARE = [\r\n    'whitenoise.middleware.WhiteNoiseMiddleware', \r\n]\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        \r\n        'DIRS': [os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'templates'),],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\r\nSTATIC_URL = '/staticfiles/'  #meaning- static url is /static/ which is set and appears in url section .we dont need to mention statiic path in codes(links)\r\n\r\n#FOR LOADIN STATIC FILES\r\nSTATICFILES_DIRS=[          #needed dnt chnage\r\n    os.path.join(BASE_DIR, 'staticfiles')  \r\n    ]\r\n\r\n#staticfiles is a folder name which we define in a directory .\r\n#This code implies that there is folder name staicfiles from which images, js ,cs are to be fetched.\r\n#STATICFILES_DIRS is necesary for displaying images, css js from a folder(in this project 'staticfiles') that we define    \r\n\r\nSTATIC_ROOT=os.path.join(BASE_DIR, 'static')\r\n\r\n#FOR SAVING IMAGES INTO THE 'static/images'\r\nMEDIA_URL ='/mediafiles/'  #your url path\r\nMEDIA_ROOT =os.path.join(BASE_DIR, 'staticfiles/mediafiles')  \r\n#meaning- Suppose you define a imagefield in customer model in models.py . So, for the image to be upload and save on the datatbase\r\n# we need to specify a path where the images are gonna be layed down. \r\n\r\n#WHITENOISE CONFIGURATION\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n\r\n\r\n\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>In <strong>urls.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">#for acessing media url\r\nfrom django.conf.urls.static import static\r\nfrom django.conf import settings\r\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)  </code></pre>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "django-settings-cheatsheet",
        "published_date": "2021-10-27T07:00:57.976Z",
        "last_updated": "2021-12-14T15:34:00.473Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            1
        ],
        "views": [],
        "bookmarks": [
            1
        ]
    }
},
{
    "model": "MArticles.article",
    "pk": 15,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Dockerize your Django Project",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894562/mediafiles/Articles/djangoanddocker_ip8vlv.png",
        "description": "<p><strong>Step1</strong>: Install Docker Desktop&nbsp;from the Docker official site.&nbsp;<a href=\"https://www.docker.com/get-started\">Click here</a>&nbsp;to visit it.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; You can run the command to check if it&#39;s correctly installed:</p>\r\n\r\n<pre>\r\n<code>docker run hello-world</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step2</strong>: Install python with pipenv followed by installing Django with it.</p>\r\n\r\n<pre>\r\n<code>pipenv install</code></pre>\r\n\r\n<pre>\r\n<code>pipenv install django&lt;version_name&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step3: </strong>Activate the Virtual Environment and start the Django project.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<pre>\r\n<code>django-admin startproject EPostgresDjango .</code></pre>\r\n\r\n<p><strong>Step4</strong>: Create a Dockerfile</p>\r\n\r\n<p>In <strong>Dockerfile</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">#Pull base image\r\nFROM python:3.9\r\n\r\n# Set environment variables\r\nENV PYTHONDONTWRITEBYTECODE 1\r\nENV PYTHONUNBUFFERED 1\r\n\r\n# Set work directory\r\nWORKDIR /DPortfolio\r\n\r\n# Install dependencies\r\nCOPY Pipfile Pipfile.lock /DPortfolio/\r\nRUN pip install pipenv &amp;&amp; pipenv install --system\r\n# Copy project\r\nCOPY . /DPortfolio/</code></pre>\r\n\r\n<p><br />\r\n<strong>Step5:</strong> <strong>docker-compose.yml </strong>configuration:</p>\r\n\r\n<p>a) For default SQLite database</p>\r\n\r\n<pre>\r\n<code>version: '3.9'\r\nservices:\r\n web:\r\n  build: .\r\n  command: python /DPortfolio/manage.py runserver 0.0.0.0:8000\r\n   volumes:\r\n     - .:/DPortfolio\r\n   ports:\r\n     - 8000:8000</code></pre>\r\n\r\n<p><br />\r\nb) For the Postgres database</p>\r\n\r\n<pre>\r\n<code>version: '3.9'\r\nservices:\r\n web:\r\nbuild: .\r\ncommand: python /DPortfolio/manage.py runserver 0.0.0.0:8000\r\n volumes:\r\n - .:/DPortfolio\r\nports:\r\n- 8000:8000\r\n depends_on:\r\n- db\r\n db:\r\nimage: postgres:11\r\n environment:\r\n POSTGRES_USER: postgres\r\nPOSTGRES_PASSWORD: postgres\r\n POSTGRES_DB: postgres\r\n POSTGRES_PORT: 5432\r\n\r\nIn settings.py\r\nDATABASES = {\r\n'default': {\r\n'ENGINE': 'django.db.backends.postgresql',\r\n 'NAME': 'postgres',\r\n 'USER': 'postgres',\r\n'PASSWORD': 'postgres',\r\n 'HOST': 'db',\r\n 'PORT': 5432\r\n}\r\n}</code></pre>\r\n\r\n<p>&nbsp; Note: Bear in mind that&nbsp;DPortfolio is a working directory containing all the project files and folders. The above&nbsp;settings for the database have nothing to do with the pgadmin database instead it&nbsp;will be used up for volumes in Docker Desktop.</p>\r\n\r\n<p><strong>Step6</strong>: Build a container of the image &nbsp;in detached mode by running a command:</p>\r\n\r\n<pre>\r\n<code>docker-compose up -d</code></pre>\r\n\r\n<p><br />\r\n<strong>Step7:</strong>&nbsp;Install psycopg2-binary and psycopg2 with docker-compose exec web pipenv</p>\r\n\r\n<pre>\r\n<code>docker-compose exec web pipenv install psycopg2-binary==2.9.1</code></pre>\r\n\r\n<pre>\r\n<code>docker-compose exec web pipenv install psycopg2==2.9.1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step8:</strong> Rebuild the Container of the image since&nbsp; We install these new packages for the database connectivity. This is imp for every new definition of packages in&nbsp; Pipfile and Pipfile.lock</p>\r\n\r\n<pre>\r\n<code>docker-compose up -d --build</code></pre>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n<strong>Useful Commands</strong><br />\r\nLet us inspect Docker. It will contain a lot of output</p>\r\n\r\n<pre>\r\n<code>docker info</code></pre>\r\n\r\n<p>shows you build logs</p>\r\n\r\n<pre>\r\n<code>docker-compose logs</code></pre>\r\n\r\n<p>build up the existing image considering the necessary changes</p>\r\n\r\n<pre>\r\n<code>docker-compose up -d --build</code></pre>\r\n\r\n<p>stop the container of an image.</p>\r\n\r\n<pre>\r\n<code>docker-compose downß</code></pre>\r\n\r\n<p>sync default SQLite database table with Postgres database table</p>\r\n\r\n<pre>\r\n<code>python manage.py migrate --run-syncdb</code></pre>\r\n\r\n<p>building docker for production only.&nbsp;</p>\r\n\r\n<pre>\r\n<code>docker-compose -f docker-compose-prod.yml up -d --build</code></pre>\r\n\r\n<p>Some Python commands with docker</p>\r\n\r\n<pre>\r\n<code>docker-compose exec web python manage.py startapp Forms</code></pre>\r\n\r\n<pre>\r\n<code>docker-compose exec web python manage.py migrate</code></pre>\r\n\r\n<pre>\r\n<code>docker-compose exec web python manage.py createsuperuser</code></pre>\r\n\r\n<p>What you need to know:<br />\r\n&nbsp; &nbsp; &nbsp;-&gt;&nbsp;<strong>docker-compose exec web</strong> is a prefix used to run python commands. Make sure you have activated the virtual env.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Must Install&nbsp;&nbsp;Packages&nbsp;with pipenv</strong></p>\r\n\r\n<p>1. psycopg2-binary</p>\r\n\r\n<pre>\r\n<code>docker-compose exec web pipenv install psycopg2-binary==2.9.1</code></pre>\r\n\r\n<p>2. Whitenoise</p>\r\n\r\n<pre>\r\n<code>docker-compose exec web pipenv install whitenoise==5.3.0</code></pre>\r\n\r\n<p>2. Gunicorn</p>\r\n\r\n<pre>\r\n<code>docker-compose exec web pipenv install gunicorn==20.1.0</code></pre>\r\n\r\n<p>3. dj-databse-url</p>\r\n\r\n<pre>\r\n<code>docker-compose exec web pipenv install dj-database-url==0.5.0</code></pre>",
        "author": 1,
        "slug": "dockerize-your-django-project",
        "published_date": "2021-10-27T07:25:51.027Z",
        "last_updated": "2022-01-23T14:00:33.225Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            1,
            7
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 16,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Generate DjangoModels Diagram",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894564/mediafiles/Articles/GeneratDjangoModelDiagrams_ydjgdg.png",
        "description": "<p>So, You are a Django Developer building full-stack web applications following MVT Design Pattern. What If you want to generate the diagram in .png format based on your Django project models which can be visualized and often comes in handy for several tasks. It&nbsp;can be achieved in just 3 steps as follows:</p>\r\n\r\n<p><strong>Step1: </strong>Install pydot and django_extension package&nbsp;</p>\r\n\r\n<pre>\r\n<code>pipenv install pydot==1.4.2</code></pre>\r\n\r\n<pre>\r\n<code>pipenv install django_extensions==3.1.3</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step2:</strong> In&nbsp;<strong>settings.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">INSTALLED_APPS = [\r\n  'django_extensions',\r\n]\r\nGRAPH_MODELS = {\r\n  'all_applications': True,\r\n  'group_models': True,\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step3:</strong> Run the following command to generate model diagrams in png format.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"background-color:#ecf0f1\">py manage.py graph_models --pydot -a -g -o my_project_visualized.png</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "generate-djangomodels-diagram",
        "published_date": "2021-11-07T08:12:25Z",
        "last_updated": "2022-03-14T11:38:44.516Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            1
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 17,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Django MultipleDatabase Setup",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894563/mediafiles/Articles/djangomultipledatabase_roxi8d.png",
        "description": "<p>This article covers up how you can set up multiple databases in any&nbsp;Django project. This Multiple Database approach is much more efficient&nbsp;in the case of Large-Scale projects like E-Commerce, Social, Educational websites, etc. So To begin with, This article is not for Django newbies. I am&nbsp;assuming you know the basics of Python and Django and you have built at least some simple Django projects(like crud, todo, portfolio) already.</p>\r\n\r\n<p><strong>Step1:</strong> In the main directory that contains <strong>manage.py</strong>,<br />\r\nCreate a &#39;routers&#39; named folder followed by creating db_routers.py inside it.(You can give any name you prefer)<br />\r\n<br />\r\nIn <strong>db_routers.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">class AuthRouter:\r\n    \"\"\"\r\n    A router to control all database operations on models in the\r\n    auth and content types applications.\r\n    \"\"\"\r\n    route_app_labels = {'auth', 'contenttypes', 'admin', 'sessions'}\r\n\r\n    def db_for_read(self, model, **hints):\r\n        \"\"\"\r\n        Attempts to read auth and content types models go to auth_db.\r\n        \"\"\"\r\n        if model._meta.app_label in self.route_app_labels:\r\n            return 'auth_db'\r\n        return None\r\n\r\n    def db_for_write(self, model, **hints):\r\n        \"\"\"\r\n        Attempts to write auth and content types models go to auth_db.\r\n        \"\"\"\r\n        if model._meta.app_label in self.route_app_labels:\r\n            return 'auth_db'  #database name\r\n        return None\r\n\r\n    def allow_relation(self, obj1, obj2, **hints):\r\n        \"\"\"\r\n        Allow relations if a model in the auth or contenttypes apps is\r\n        involved.\r\n        \"\"\"\r\n        if (\r\n            obj1._meta.app_label in self.route_app_labels or\r\n            obj2._meta.app_label in self.route_app_labels\r\n        ):\r\n            return True\r\n        return None\r\n\r\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\r\n        \"\"\"\r\n        Make sure the auth and contenttypes apps only appear in the\r\n        'auth_db' database.\r\n        \"\"\"\r\n        if app_label in self.route_app_labels:\r\n            return db == 'auth_db'\r\n        return None\r\n\r\nclass SchoolRouter:\r\n    route_app_labels = {'Mschool'}#Mclub is name of app.Note we haven't mention 'auth', 'contenttypes', 'admin', 'sessions since this database will only handle certain app database.\r\n\r\n    def db_for_read(self, model, **hints):\r\n        if model._meta.app_label in self.route_app_labels:\r\n            return 'school_db'\r\n        return None\r\n\r\n    def db_for_write(self, model, **hints):\r\n        if model._meta.app_label in self.route_app_labels:\r\n            return 'school_db'\r\n        return None\r\n\r\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\r\n        if app_label in self.route_app_labels:\r\n            return db == 'school_db'\r\n        return None\r\n\r\nclass ClubRouter:\r\n    route_app_labels = {'Mclub'}#Mclub is name of app.Note we haven't mention 'auth', 'contenttypes', 'admin', 'sessions since this database will only handle certain app database.\r\n\r\n    def db_for_read(self, model, **hints):\r\n        if model._meta.app_label in self.route_app_labels:\r\n            return 'club_db'\r\n        return None\r\n\r\n    def db_for_write(self, model, **hints):\r\n        if model._meta.app_label in self.route_app_labels:\r\n            return 'club_db'\r\n        return None\r\n\r\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\r\n        if app_label in self.route_app_labels:\r\n            return db == 'club_db'\r\n        return None</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step2:</strong> Configure DATABASE and DATABASE_ROUTERS in <strong>settings.py</strong></p>\r\n\r\n<p>In <strong>settings.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">DATABASES = {\r\n    'default':{\r\n    #default is a must\r\n    },\r\n    'auth_db': {  #auth_db is the name of database\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    },\r\n    'school_db':{\r\n         'ENGINE': 'django.db.backends.sqlite3',\r\n         'NAME': BASE_DIR / 'school.db.sqlite3',       \r\n    },\r\n    'club_db': {\r\n        'NAME': 'club',\r\n        'ENGINE': 'django.db.backends.postgresql',\r\n        'USER': 'postgres',\r\n        'PASSWORD': 'ProgrammerGodRobo123',\r\n        'PORT': 5432\r\n    },\r\n}\r\n\r\nDATABASE_ROUTERS = [\r\n    #syntax:'path.to.router'\r\n    'routers.db_routers.AuthRouter',   #AuthRouter accessed from routers folder\r\n    'routers.db_routers.SchoolRouter',    \r\n    'routers.db_routers.ClubRouter',\r\n]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step3:</strong> Now, We migrate all the tables to our main database&nbsp;</p>\r\n\r\n<pre>\r\n<code>python manage.py migrate --database=auth_db</code></pre>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; Note: auth_db refers to the name of the database<br />\r\n&nbsp;<br />\r\n<strong>Step4:</strong> Then, We create a superuser in our main database which is auth_db in this example</p>\r\n\r\n<pre>\r\n<code>python manage.py createsuperuser --database=auth_db</code></pre>\r\n\r\n<p><big><strong>Did You Notice?:&nbsp;</strong></big></p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt; Step3 and Step4 are the two&nbsp;commands that are always executed&nbsp;during the initial setup of any Django project.&nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p><br />\r\n<strong>Step5:</strong> Run the local server</p>\r\n\r\n<pre>\r\n<code>python manage.py runserver</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><big><strong>Extras:</strong></big>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\nEvery time you make changes to database models, Run the following command in sequence.</p>\r\n\r\n<p>&nbsp;&nbsp;#checks&nbsp;for databases&nbsp;changes</p>\r\n\r\n<pre>\r\n<code>python manage.py makemigrationsß</code></pre>\r\n\r\n<p>&nbsp;#migrate changes to the desired database</p>\r\n\r\n<pre>\r\n<code>python manage.py migrate --database=database_alias_name</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Getting objects from specific database<br />\r\n&nbsp; &nbsp; data = Blue.objects.using(&#39;blue_db&#39;).all()&nbsp;</p>",
        "author": 1,
        "slug": "django-multipledatabase-setup",
        "published_date": "2021-10-27T08:48:46Z",
        "last_updated": "2021-11-28T08:28:48.099Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            1
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 18,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Django Form Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894563/mediafiles/Articles/djangoformcheatsheet_qfcmie.png",
        "description": "<p>Forms are the one and only way to send the data to the server. Django Built-in <strong>ModelForm</strong> automatically creates a model in the database defining a form containing fields associated with the model&#39;s instance fields.&nbsp;<br />\r\n<strong>Note</strong>: <u>forms.ModelForm</u> has get_cleaned_data() and save() method while <u>forms.Form </u>doesn&#39;t.<br />\r\n<strong>UserCreationForm</strong> allows us to create a default User model&nbsp;with the fields that we specify on class Meta.&nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>In <strong>forms.py</strong></p>\r\n\r\n<pre>\r\n<code class=\"language-python\">from django import forms\r\nfrom django.forms import fields\r\nfrom django.contrib.auth.forms import UserCreationForm  \r\nfrom .models import AllForm, User\r\nfrom.models import Contact\r\n\r\n\r\n#UserCreation using UserCreationForm\r\nclass UserRegistration(UserCreationForm):\r\n\r\n    #defining custom fields to User model\r\n    password1 = forms.CharField(\r\n        label=\"Password\",\r\n        widget=forms.PasswordInput(attrs={'class':'pass', 'type':'password', 'align':'center', 'placeholder':'Enter a password'}),\r\n    )\r\n    password2 = forms.CharField(\r\n        label=\"Confirm password\",\r\n        widget=forms.PasswordInput(attrs={'class':'pass', 'type':'password', 'align':'center', 'placeholder':'Reenter  the password'}),\r\n    )   \r\n\r\n    class Meta:\r\n        model = User\r\n        fields = ['username','email','password1','password2']\r\n        widgets = {\r\n            'username': forms.TextInput(attrs={'class': 'col-sm-12','placeholder':'Enter your Name'}),\r\n            'email': forms.EmailInput(attrs={'class': 'col-sm-12','placeholder':'Enter a valid Email'}),\r\n        }\r\n        \r\n'''\r\n password1 and password2 are custom fields on the UserCreationForm\r\nsince they do not exist as model fields on the Default User model. \r\nMeta. You will need to redefine these fields and their widgets in your form to apply widgets.  \r\n'''  \r\n\r\n\r\n#FileValidatorForm using FileExtensionValidator\r\nclass ImageForm(ModelForm):\r\n    ALLOWED_TYPES = ['jpg', 'jpeg', 'png', 'gif']\r\n\r\n    class Meta:\r\n        model = Profile\r\n        fields = ['image', ]\r\n\r\n    def clean_avatar(self):\r\n        image = self.cleaned_data.get('image', None)\r\n        if not avatar:\r\n            raise forms.ValidationError('Missing image file')\r\n        try:\r\n            extension = os.path.splitext(image.name)[1][1:].lower()\r\n            if extension in self.ALLOWED_TYPES:\r\n                return avatar\r\n            else:\r\n                raise forms.ValidationError('File types is not allowed')\r\n        except Exception as e:\r\n            raise forms.ValidationError('Can not identify file type')\t\r\n\r\n\r\n#CommentForm using mptt.forms\r\nfrom mptt.forms import TreeNodeChoiceField\t\r\nclass NewCommentForm(forms.ModelForm):\r\n    parent = TreeNodeChoiceField(queryset=AComment.objects.all())\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n\r\n        self.fields['parent'].widget.attrs.update(  #remove the select option\r\n            {'class': 'd-none'})\r\n        self.fields['parent'].label = ''\r\n        self.fields['content'].label = ''#remove the label element for parent(text wont appear)\r\n        self.fields['parent'].required = False #to remove input required atttribute for parent so its gonna be optional\r\n\r\n    class Meta:\r\n        model = AComment\r\n        fields = ( 'parent',  'content')\r\n\r\n        widgets = {\r\n            'name': forms.TextInput(attrs={'class': 'col-sm-12'}),\r\n            'content': forms.Textarea(attrs={'class': 'form-control','placeholder':'Your Comment'}),\r\n        }\r\n\r\n    def save(self, *args, **kwargs):\r\n        AComment.objects.rebuild()\r\n        return super(NewCommentForm, self).save(*args, **kwargs)\r\n\r\n\r\n\r\n#Forms using forms.ModelForm\r\nclass ContactUpdate(forms.ModelForm):\r\n  class Meta:\r\n    model=Contact\r\n    fields=['name','email','title','url','description']\r\n\r\n\r\nclass ProfileForm(forms.ModelForm):\r\n    error_messages = {\r\n\t\t'required': ugettext_lazy(\"This field is mandatory.\"),\r\n\t\t'invalid': 'Enter a valid number',\r\n\t\t'caps': 'This field if case sensitive' \r\n\t\t}\r\n\r\n    esewa_id = forms.CharField(error_messages=error_messages,\r\n     label='Esewa_Id',\r\n     help_text='This information will be used only for payment purpose.',\r\n     widget=forms.NumberInput(attrs={'class':'NumberField', 'type':'number', 'placeholder':'Enter your Esewa_Id'}),\r\n\r\n     )\r\n    class Meta:\r\n\t    model=Customer\r\n\t    fields = ['first_name','second_name','email','image','gender','esewa_id']\r\n\r\n\r\n\r\n#Creating Forms using forms.Form\r\nclass ArticleSearchForm(forms.Form):\r\n    q = forms.CharField()\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n\r\n        self.fields['q'].label = ''\r\n        self.fields['q'].widget.attrs.update(\r\n            {'class': 'form-control','placeholder':'Search the Articles...'})\r\n\r\nclass ContactForm(forms.Form):\r\n    name=forms.CharField()\r\n    email=forms.EmailField()\r\n    subject=forms.CharField()\r\n    message = forms.CharField(widget=forms.Textarea)\r\n    \r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        \r\n        self.fields['name'].label = ''\r\n        self.fields['name'].widget.attrs.update(\r\n            {'class': 'form-control','id':'name','placeholder':'Enter Your Name.'})   \r\n       \r\n        self.fields['email'].label = ''\r\n        self.fields['email'].widget.attrs.update(\r\n            {'class': 'form-control','id':'email','placeholder':'Enter Your Email.'})\r\n\r\n        self.fields['subject'].label=''\r\n        self.fields['subject'].widget.attrs.update(\r\n            {'class': 'form-control','id':'subject','placeholder':'Subject'}\r\n        )          \r\n        self.fields['message'].label=''\r\n        self.fields['message'].widget.attrs.update(\r\n            {'class': 'form-control','id':'message','rows':5,'placeholder':'Your Message'}\r\n        )     \r\n        \r\nclass EmailSubscriptionForm(ModelForm):\r\n      class Meta:\r\n          model=EmailSubscription\r\n          fields=('email',)\r\n\r\n          widgets = {\r\n                'email': forms.EmailInput(attrs={'placeholder':'Your Email Here'}),\r\n            }       \r\n\r\n\r\n\r\n\r\n\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "django-form-cheatsheet",
        "published_date": "2021-10-01T09:49:39Z",
        "last_updated": "2022-01-24T13:09:02.100Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 19,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Deploy your Django application to Heroku using Github",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894562/mediafiles/Articles/DeployWithGithub_vtup8h.png",
        "description": "<p>So, You did some Django project&nbsp;and you want to deploy it?. Here&#39;s a question where to deploy? , how to deploy? and what is the cost of it?.&nbsp;In this article, I am going to show how you can deploy your Django app in Heroku using GitHub. If You don&rsquo;t know about GitHub and Heroku.</p>\r\n\r\n<p>Here&rsquo;s short info:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <strong>Heroku:</strong> It is the Platform as a Service-based cloud platform that helps developers to deploy their application easily and quickly without any infrastructures headaches, investing money in hardware, maintenance, and issues of Databases, and so on.</p>\r\n\r\n<p>Why Choose Heroku?</p>\r\n\r\n<p>It does have a free plan(no cost) for beginners, students, startup companies which is enough to get started with and know how things flow.</p>\r\n\r\n<p><strong>GitHub</strong>: On the other hand, GitHub is a web-based application designed for developers to maintain their software (along with teams) and is best known for version control using Git.</p>\r\n\r\n<p>First, create an account on Heroku and GitHub if you haven&rsquo;t.</p>\r\n\r\n<p><strong>Step1</strong>: Create a repository on GitHub for your Django project.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image1_zza8ji\" style=\"height:400px; width:722px\" /></p>\r\n\r\n<p>All your repositories will reside on the left-hand side of the page. Click on the New button on the top-left side of the page.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image2_emtkdj\" style=\"height:624px; width:720px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>It will send you to a different page. On the page, Mention the name of your repository. Choose any one from two options (Private or Public) . Then, Click on Create repository button. &nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step2</strong>: On your Vscode (any other text editor, git bash shell&hellip;) terminal, Run the command to create a git repository in your local machine.</p>\r\n\r\n<pre>\r\n<code>ß git init</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step3</strong>: Clone your remote repository on your local machine.</p>\r\n\r\n<pre>\r\n<code>git clone &lt;copied_url&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image3_bf1vtv\" style=\"height:400px; width:720px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step4: </strong>Heroku requires two files i.e requirements.txt and procfile must for deployment on Heroku.</p>\r\n\r\n<p>Run the following command to make a list of packages that are required for running your project:</p>\r\n\r\n<pre>\r\n<code>pip freeze &gt; requirements.txt</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For procfile, run a command to make a file named procfile:</p>\r\n\r\n<pre>\r\n<code>touch procfile</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>procfile must look like this:</p>\r\n\r\n<pre>\r\n<code>web: gunicorn &lt;django_project_name&gt;.wsgi</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step5:</strong> Run the command to add all the files of your project</p>\r\n\r\n<pre>\r\n<code>git add .</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step6:</strong> Then, Run the following command to make a commit.</p>\r\n\r\n<pre>\r\n<code>git commit -m \"Project Initialized\"</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step7:</strong> Then, Push your local code to the master branch of your remote repository using the command:</p>\r\n\r\n<pre>\r\n<code>git push origin master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step8:</strong> This is the last step in which we will create an app and deploy it connecting to GitHub.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image5_p5xah3\" style=\"height:500px; width:720px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image4_fu0qjz\" style=\"height:500px; width:720px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Then, click on the New button followed by Create new app button.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image6_vfvqmf\" style=\"height:300px; width:720px\" /></p>\r\n\r\n<p>All your apps are listed on the page. Then, click on your app name.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image7_aynrz9\" style=\"height:340px; width:720px\" /></p>\r\n\r\n<p>There are different section that is responsible for certain purpose. For now, Click on Deploy section.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image8_zncjbo\" style=\"height:400px; width:720px\" /></p>\r\n\r\n<p>Then, Choose the Deployment method as GitHub.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image9_zv2llf\" style=\"height:200px; width:720px\" /></p>\r\n\r\n<p>Search for your git repository and then connect it.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2021/11/14/image10_vkreq8\" style=\"height:400px; width:720px\" /></p>\r\n\r\n<p>Then, Click on Enable automatic Deploys button. This will automatically deploy for the changes that you make to your remote git repository and Click on the Deploy branch button.</p>",
        "author": 1,
        "slug": "deploy-your-django-application-to-heroku-using-github",
        "published_date": "2021-08-05T07:37:21Z",
        "last_updated": "2022-01-02T07:46:48.294Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            8
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 20,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Github Command Cheatsheet",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1636894566/mediafiles/Articles/githubcommandcheatsheet_auqlk3.png",
        "description": "<p>Github is a web-based application used by millions of developers to maintain their software and work with teams efficiently.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Below is the top GitHub command that can boost up your development and version control speed. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Required Command for initial setup and running git command globally</p>\r\n\r\n<pre>\r\n<code>git config --global user.email \"Youremail@gmail.com\"</code></pre>\r\n\r\n<pre>\r\n<code>git config --global user.name \"YourName\"</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//create a local git repository on your local machine&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n\r\n<pre>\r\n<code>git init</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Gives you information about the commits(i.e What you have committed...)</p>\r\n\r\n<pre>\r\n<code>git status</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Add single file to be tracked</p>\r\n\r\n<pre>\r\n<code>git add file1.txt</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Add all files to be tracked to the staging area</p>\r\n\r\n<pre>\r\n<code>git add .</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Transfer tracked files from staging area to local repository</p>\r\n\r\n<pre>\r\n<code>git commit -m \"Project Initialized.\"</code></pre>\r\n\r\n<p>Note: A commit is nothing but changes which is referred to by its hash which is generated using an SHA-1 hash algorithm with all of the above, plus a NUL terminated header with the word commit and the length of the commit.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//add and commit in a single command</p>\r\n\r\n<pre>\r\n<code>git commit -am \"Project Initialized.\"</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//History about Commits made in files/folder.</p>\r\n\r\n<pre>\r\n<code>git log</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Information about Changes applied in files/folder in oneline.</p>\r\n\r\n<pre>\r\n<code>git log --oneline</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Switch to another branch &#39;main&#39;</p>\r\n\r\n<pre>\r\n<code>git checkout main</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Clone or Copy remote git repository into your local machine</p>\r\n\r\n<pre>\r\n<code>git clone url</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Connect to the remote repository</p>\r\n\r\n<pre>\r\n<code>git remote add origin url</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Push all tracked files of the local repository to the remote repository.</p>\r\n\r\n<pre>\r\n<code>git push origin master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Keek track of changes that you made from remote repository to local repository.</p>\r\n\r\n<pre>\r\n<code>git pull origin master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:14px\"><strong>Branching</strong></span></p>\r\n\r\n<p>Branching is done to carry out various works without affecting the master&nbsp;branch. So, If anything goes wrong in that branch we can simply delete it.&nbsp;Later on, we merge the master branch with another branch when work is approved or simply bring new updates to the master branch.</p>\r\n\r\n<pre>\r\n<code>git branch branch1</code></pre>\r\n\r\n<p>Note: This command copies every file of the master branch to the new branch.</p>\r\n\r\n<p>//For viewing the branches of your local repositroy, you need to run the following command:</p>\r\n\r\n<pre>\r\n<code>git branch</code></pre>\r\n\r\n<p>Note: 1. But if you switch to the branch that exists in the remote repository then the above command will also view branches of&nbsp; the remote repository.</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2. Remote branches will be displayed in red color.</p>\r\n\r\n<p>//To display both remote and local branches, run:</p>\r\n\r\n<pre>\r\n<code>git branch -a</code></pre>\r\n\r\n<p>&nbsp;//To display both remote&nbsp;branches, run:</p>\r\n\r\n<pre>\r\n<code>git branch -r</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Switch to another branch &#39;branch1&#39;</p>\r\n\r\n<pre>\r\n<code>git checkout branch1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Instead of using the two commands above, you can just run the&nbsp;<kbd>git checkout</kbd>&nbsp;command with the&nbsp;<kbd>-b</kbd>&nbsp;option to create a new branch and checkout to it:</p>\r\n\r\n<pre>\r\n<code>git checkout -b branch1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//To push the local branch to the remote repository, you should run the git push command by specifying the branch name (Name of remote is the origin, which is by default):</p>\r\n\r\n<pre>\r\n<code>git push -u origin &lt;new-branch-name&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//merge default branch(master) with create one(branch1) with fast-forwarding</p>\r\n\r\n<pre>\r\n<code>git merge branch1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//merge default branch(master) with create one(branch1) without fastforwading</p>\r\n\r\n<pre>\r\n<code>git merge --no--ff branch1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//lends Information about merge branch</p>\r\n\r\n<pre>\r\n<code>git branch --merged</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Information about unmerged branch</p>\r\n\r\n<pre>\r\n<code>git branch --no-merged</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Takes you to the desired commit</p>\r\n\r\n<pre>\r\n<code>git reset --hard &lt;hashvalue&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Delete the &#39;main&#39; branch of the local repository(merging is required).</p>\r\n\r\n<pre>\r\n<code>git branch -d main</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Delete the &#39;main&#39; branch of the local repository(merging is not required).</p>\r\n\r\n<pre>\r\n<code>git branch -D main</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>//Delete the &#39;main&#39; branch of the remote repository.</p>\r\n\r\n<pre>\r\n<code>git push origin -d main</code></pre>\r\n\r\n<p><br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Or</p>\r\n\r\n<pre>\r\n<code>git push --set -upstream origin main</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Renaming a Branch</h3>\r\n\r\n<p>For renaming a&nbsp;<kbd>git branch</kbd>, you need to run the following command:</p>\r\n\r\n<pre>\r\n<code>git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h1><span style=\"font-size:20px\"><strong>Pull Requests, Fast-Forward Merge, and Conflict Solution</strong></span></h1>\r\n\r\n<p>Conflict takes place on pushing to the origin master making commits after more than one user makes different changes in one single file. The optimal solution for the conflicts is to&nbsp;make a new branch and then pull the changes that recently took place in the remote repository to that branch. Then, we finally merge it to the master branch. If you directly pull the changes to the master branch(default branch) then, we can&#39;t solve Conflict Problems.</p>\r\n\r\n<p>It can be solved in VsCode which has a debugger for it.</p>\r\n\r\n<p>Then, Vscode will highlight lines with options available. Choose one and that&#39;s it. Suppose, you chose to accept both changes then, What you need to do after, is to create a commit for it and push to the origin.</p>\r\n\r\n<p><span style=\"font-size:14px\"><strong>FastForward Merge</strong></span></p>\r\n\r\n<p>Fast forward merge can be performed when there is a direct linear path from the source branch to the target branch. In fast-forward merge, git simply moves the source branch pointer to the target branch pointer without creating an extra merge commit.</p>\r\n\r\n<p>Let us look at an example of implementing fast-forward merge.</p>\r\n\r\n<p>We have a master branch with 3 commits.</p>\r\n\r\n<p><img src=\"https://www.tutorialspoint.com/assets/questions/media/51681/master_branch.jpg\" style=\"height:251.167; width:472px\" /></p>\r\n\r\n<p>Next, we create a branch called the feature branch. In git, a branch is nothing but a pointer to a commit. At this point, both feature and master are pointing to the same commit.</p>\r\n\r\n<p><img src=\"https://www.tutorialspoint.com/assets/questions/media/51681/master.jpg\" style=\"height:456px; width:600px\" /></p>\r\n\r\n<p>Now let us switch to the feature branch and do a couple of commits. Now we need to bring the changes to the master branch. There is a linear path from feature to master.</p>\r\n\r\n<p><img src=\"https://www.tutorialspoint.com/assets/questions/media/51681/master1.jpg\" style=\"height:318px; width:600px\" /></p>\r\n\r\n<p>In order to merge the changes to the master branch, all git has to do is to change the pointer of the master forward. This is what we call fast-forward merge.</p>\r\n\r\n<p><img src=\"https://www.tutorialspoint.com/assets/questions/media/51681/master2.jpg\" style=\"height:322px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For Example</p>\r\n\r\n<p>Suppose, Person1&nbsp;has&nbsp;made some changes in file1.txt present in the master branch&nbsp;from the remote repository. Similarly, Person2 has made some changes to the same file of the same branch&nbsp;in his local computer. When&nbsp;&nbsp;Person2 runs the git push command, he/she will see conflict errors. For this, Person 2 will have to&nbsp;carry out the following steps.</p>\r\n\r\n<p>First, run the command to make a new branch. We are gonna pull the changes in this branch, not the default branch(master):</p>\r\n\r\n<pre>\r\n<code>git branch branch1</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Then Switch to the branch1</p>\r\n\r\n<pre>\r\n<code>git checkout branch1\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Run&nbsp;the pull command to pull the changes to branch 1</p>\r\n\r\n<pre>\r\n<code>git pull origin master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Then, switch back&nbsp;to the master</p>\r\n\r\n<pre>\r\n<code>git checkout master</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Finally, we merge the master branch with branch1.</p>\r\n\r\n<pre>\r\n<code>git merge branch1</code></pre>\r\n\r\n<p>Note, Merging sets the id of the master branch to id of branch1. You can find out by git log command.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;</p>",
        "author": 1,
        "slug": "github-command-cheatsheet",
        "published_date": "2021-07-06T11:32:09Z",
        "last_updated": "2022-02-13T19:23:15.727Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": [
            1
        ]
    }
},
{
    "model": "MArticles.article",
    "pk": 21,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Serve Django Mediafiles using Cloudinary",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1637573973/mediafiles/Articles/servedjangousingcloudinary_v8zzml.png",
        "description": "<p>&nbsp;Django does serve static files but if you want to serve dynamic media files like videos, images then you would consider googling for hours but still couldn&#39;t find a solution. In this article, I am going to show&nbsp;how you can use Cloudinary to serve Django media files. Let&#39;s break down this into steps.</p>\r\n\r\n<p>Step1: Install&nbsp;&nbsp;&#39;cloudinary_storage&#39; package running the command:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<pre>\r\n<code>pipenv install django-cloudinary-storage</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step2: Mention&nbsp; it in INSTALLED_APPS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<pre>\r\n<code>INSTALLED_APPS = [\r\n    # ...\r\n    'taggit';     \r\n    'cloudinary_storage',\r\n    'django.contrib.staticfiles',\r\n    'cloudinary',\r\n    # ...\r\n]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step3: In <strong>settings.py</strong>, Add the following lines of code</p>\r\n\r\n<pre>\r\n<code>\r\nMEDIA_ROOT =os.path.join(BASE_DIR, 'staticfiles/mediafiles')\r\nMEDIA_URL ='/mediafiles/'\r\n\r\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step4: In <strong>models.py</strong>, Create a model</p>\r\n\r\n<pre>\r\n<code>from django.db import models\r\n\r\ndef article_image_directory_path():\r\n    return 'Articles/'\r\n\r\nclass Article(models.Model):  \r\n    title=models.CharField(max_length=250, null=True)\r\n    thumbnail = models.Field(upload_to=article_image_directory_path(), null=True, blank=True)\r\n    </code></pre>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "serve-django-mediafiles-using-cloudinary",
        "published_date": "2021-11-14T13:55:42.885Z",
        "last_updated": "2021-11-28T09:02:20.383Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            1
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 22,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "How to connect Godaddy domain to any Heroku app",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1641192321/mediafiles/Articles/domainconnecttoheroku_x5v8ax.png",
        "description": "<p>In this article, I am gonna teach you how you can connect your GoDaddy domain to any Heroku app. For the demonstration, I have deployed my Django project in the Heroku platform on the free tier.&nbsp;</p>\r\n\r\n<p>Let&#39;s dive into the procedure.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <strong>Step1:</strong> Add the&nbsp;Godaddy domain in&nbsp; Heroku Settings section. I have added a dimensionalillusions.com domain with the prefix &#39;www&#39;.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture8_w1mree\" style=\"height:180px; width:722px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture4_nblxf1\" style=\"height:501px; width:323px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step2</strong>: Copy the DNS target and make a&nbsp; CNAME record in Godaddy&nbsp;&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture5_ltechl\" style=\"height:171px; width:722px\" /></p>\r\n\r\n<p>&nbsp; &nbsp;We paste the DNS target in the value attribute of the record. So that, It can point to the .herokuapp.com.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture6_cs3o58\" style=\"height:298px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step3</strong>: Add Domain forwarding which can be done under&nbsp;the DNS page of Godaddy.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture7_ipmcep\" style=\"height:381px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture8_df1vxn\" style=\"height:565px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step4</strong>: Add the domain in ALLOWED_HOST of your Django project in Github.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture_bmcmxq\" style=\"height:94px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You better&nbsp;remove the Heroku domain that Heroku provides and localhost. That&#39;s not supposed to be in the Production up and running apps. Godaddy will take some minutes since we are forwarding the domain to http://www.dimensionalillusions.com.So, When you just type &#39;dimensionalillusions.com&#39; the browser will forward you to the forwarding domain. That&#39;s all for this article.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "how-to-connect-godaddy-domain-to-any-heroku-app",
        "published_date": "2022-01-02T07:44:20.699Z",
        "last_updated": "2022-01-23T13:57:44.076Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            8
        ],
        "views": [
            3
        ],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 23,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "How to Setup Budget Alerts on AWS",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1641192318/mediafiles/Articles/AWSBudgetAlerts_a9jqra.png",
        "description": "<p>If you run EC2 instances, use&nbsp;Lightsail services, etc without knowing about AWS billing and regions,&nbsp;You&#39;&#39;ll get gigantic charges from AWS&nbsp;you never could think&nbsp;of. That&#39;s not what you want though. You would like to have a notification or have an idea about how much I have spent on what services? or get a notification when you are gonna get charged&nbsp;when the Used Services exceeds its limit. So, That&#39;s where the AWS budget comes into play. Creating Budget Alerts in AWS helps you to get notified about billing. The process is simple.</p>\r\n\r\n<p><strong>Step1:</strong>&nbsp;Go to Billing Dashboard.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture11_lnlide\" style=\"height:400px; width:554px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step2</strong>: Click on the Budgets on the left sidebar.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture12_bchey0\" style=\"height:303px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Step3</strong>: Now, We are on the page that allows us to create&nbsp;a Budget.</p>\r\n\r\n<p>Click on Create budget button</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture13_hefveu\" style=\"height:155px; width:722px\" /></p>\r\n\r\n<p>Choose the Budget type to Cost budget since we want to track the utilization of costs against a specific amount and receive alerts on mails when thresholds are met.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture14_a6qlsd\" style=\"height:380px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture15_faj1ue\" style=\"height:472px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture16_q8ghbs\" style=\"height:172px; width:722px\" /></p>\r\n\r\n<p>After Setting the Budget amount, the next step is to add an alert threshold which plays an important role in notifying us about the bills, budgets, budgets reports, etc.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture17_tnbdcb\" style=\"height:182px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture18_kjr91l\" style=\"height:413px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture19_pjvbb9\" style=\"height:391px; width:722px\" /></p>\r\n\r\n<p>When you used up 80% of the amount that you allow&nbsp;for your budget, A&nbsp;notification will be pushed to every Email recipient.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture20_rekv8w\" style=\"height:348px; width:722px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/02/capture21_mjyvwk\" style=\"height:60px; width:722px\" /></p>",
        "author": 1,
        "slug": "how-to-setup-budget-alerts-on-aws",
        "published_date": "2022-01-02T09:54:58.249Z",
        "last_updated": "2022-01-23T13:58:07.253Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            7,
            10
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 24,
    "fields": {
        "contenttype": "Article",
        "visibility": "Public",
        "title": "Deploy your Django application to AWS LightSail",
        "thumbnail": "https://res.cloudinary.com/dcgrv6shk/image/upload/v1641912593/mediafiles/Articles/deploydjangoonAwsLightsail_doweah.png",
        "description": "<p>Amazon Lightsail is one of the popular and most used services offered by Amazon to deploy, run and scale your applications&nbsp;on a Virtual Private Server in a matter of few minutes.&nbsp;It&nbsp;is powered to distribute&nbsp;a higher&nbsp;level of security, reliability, and scalability you are expecting from AWS. Recently,&nbsp; AWS has brought some new updates to the services allowing you to deploy containerized applications on the cloud. For the demonstration of how to deploy on&nbsp;the Lightsail, I will deploy a Django application on AWS Lightsail.</p>\r\n\r\n<p><br />\r\nStep1: Search for Lightsail service and click on it.&nbsp;</p>\r\n\r\n<p>Step2: You will be redirected to a nice&nbsp;interface of Lightsail greeting you!. Click on Create instance button.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture1_u77lg4\" style=\"height:422px; width:722px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step3: Choose a region that is close to you. AWS Lightsail only accepts certain regions. Prefer Documentation for that.&nbsp;By creating your instances in separate Availability Zones, you protect your applications from failure in a single location. Lightsail images are available on two platforms: Linux/Unix and Windows. Select&nbsp;Linux/Unix&nbsp;platform, followed by selecting Django&nbsp;blueprint.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture2_su9icp\" style=\"height:476px; width:500px\" /></p>\r\n\r\n<p>Step4. Then, Click on change SSH key pair manager.<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Create a new SSH key pair manager by clicking on create new button. Download the Generated key.<br />\r\n&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture3_uanxts\" style=\"height:123px; width:439px\" /></p>\r\n\r\n<p>Step5: If you are a new customer AWS offers free plans for Lightsail. I am selecting a $5USD per month plan that comes with&nbsp;1GB RAM,1 Processor, 40GB ROM, and up to 1TB Data Transfer</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture31_jmud9d\" style=\"height:268px; width:589px\" /></p>\r\n\r\n<p>Step6: Include a unique&nbsp;Name for the Instance&nbsp;and click on Create instance button.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture4_yp1rk3\" style=\"height:404px; width:658px\" /></p>\r\n\r\n<p>Step7: Now, You have successfully created a Lightsail&nbsp;Instance. To see your app, click on your instance and just paste the public IP address in the browser.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture5_ot07ou\" style=\"height:232px; width:500px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture6_y8jgbo\" style=\"height:256px; width:600px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture7_ge1bww\" style=\"height:469px; width:712px\" /></p>\r\n\r\n<p>Step8: Hold on, this is not the end. We haven&#39;t deployed the Django app on Lightsail yet. Download Filezilla Client from the official site. In short, It allows you to connect to&nbsp;the remote server and carry out various tasks such as crud operations, uploading files and folders to the server, etc.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/10/capture12_scis1f\" style=\"height:327px; width:710px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step9: Go&nbsp;to Edit and left-click on settings. It will pop up an interface in which you&#39;ll have to provide a private key in order to connect to the server. Click on Add Key file button and Choose the .pem file of Lightsail Instance. Then Click on Ok Button.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/10/capture13_wpsbne\" style=\"height:584px; width:710px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step10: Go to File and click on Site Manager. Click on the new site button and mention the name for your site. Set the Protocol to SFTP, Host to the public Ip of Lightsail Instance, User to bitnami, and click on Connect Button.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/10/capture15_x5xqi0\" style=\"height:391px; width:710px\" /></p>\r\n\r\n<p>Step11: Visit htdocs directory of the remote server. I have uploaded ProductManagementSystem from my local computer to the remote server inside the htdocs directory.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/10/capture16_fngvhw\" style=\"height:249px; width:710px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/10/capture17_tvc0lc\" style=\"height:214px; width:710px\" /></p>\r\n\r\n<p>Step12: Go to Networking Section and Add a new rule that has a port 8000(a default port that Django uses).</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture8_ojnbim\" style=\"height:328px; width:535px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Step13: Then, Visit Connect Section and&nbsp;Click on Connect using SSH button. This will open a browser-based Command-line interface.</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture10_lydu80\" style=\"height:265px; width:600px\" /></p>\r\n\r\n<p>Step14: We have to include the Public Ip address in ALLOWED_HOSTS of settings.py. Run the following command in sequence.</p>\r\n\r\n<pre>\r\n<code>cd htdocs</code></pre>\r\n\r\n<pre>\r\n<code>cd ProductManagementSystem</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The following nano&nbsp;command will open the settings.py file in which we are going to perform a write operation by including the Public IP on ALLOWED_HOSTS.</p>\r\n\r\n<pre>\r\n<code>nano settings.py</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/06/capture11_gdw4wi\" style=\"height:284px; width:600px\" /></p>\r\n\r\n<p>Press Ctrl +O and hit Enter key to write to the file.&nbsp;You&#39;ll see &#39;wrote 12.. lines&#39; in the command prompt.<br />\r\nPress Ctrl+X to exit from the nano editor.</p>\r\n\r\n<p>Step15: Lastly, Run the following command to run the server.</p>\r\n\r\n<pre>\r\n<code>python manage.py runserver 0.0.0.0:8000</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Tada, It worked!!</p>\r\n\r\n<p><img alt=\"\" src=\"https://res.cloudinary.com/dcgrv6shk/image/upload/v1/mediafiles/ckeditor/uploads/2022/01/10/capture18_rchpmp\" style=\"height:399px; width:710px\" /></p>\r\n\r\n<p>&nbsp;</p>",
        "author": 1,
        "slug": "deploy-your-django-application-to-aws-lightsail",
        "published_date": "2022-01-06T05:23:28.299Z",
        "last_updated": "2022-02-03T09:12:05.996Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [
            8,
            10
        ],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.article",
    "pk": 39,
    "fields": {
        "contenttype": "Article",
        "visibility": "Private",
        "title": "Pyenv",
        "thumbnail": null,
        "description": "<h2>Why should you use&nbsp;<code>pyenv</code>&nbsp;and Virtual Python Environments?</h2>\r\n\r\n<p>As a programmer, either employed at a company, freelancer or even as a hobbyist, you usually work on multiple programming projects simultaneously. And most of those projects require different Python versions and depend on other modules like a particular version of&nbsp;<code>numpy</code>, for example. Or, if you created a Python module yourself and want to validate that it runs correctly on different Python versions, you need a way to install several Python versions on your system. And sometimes, you want to take a sneak at the latest Python release candidate but don&rsquo;t want to ruin your production system.</p>\r\n\r\n<p>For all those situations,&nbsp;<code>pyenv</code>&nbsp;and virtual environments (<code>venv</code>) offer an easy solution for installing different Python versions on your system and setting up environments with other requirements.</p>\r\n\r\n<p>In this article and the accompanying Youtube videos, you learn how to install and set up&nbsp;<code>pyenv</code>&nbsp;and&nbsp;<code>venv</code>&nbsp;under Windows 10, macOS, and Ubuntu Linux and how to use it with VSCode.</p>\r\n\r\n<h2>Installing pyenv</h2>\r\n\r\n<h3>Windows 10/11</h3>\r\n\r\n<p><code>pyenv</code>&nbsp;actually started as a tool for Unix platforms such as Linux and macOS; however, there is an excellent Windows 10/11 port of it which can be found in this GitHub repository:&nbsp;<a href=\"https://github.com/pyenv-win/pyenv-win\">https://github.com/pyenv-win/pyenv-win</a></p>\r\n\r\n<p>Installing&nbsp;<code>pyenv-win</code>&nbsp;is not very straightforward due to how Windows 10/11 and PowerShell works, but if you follow those steps, it shouldn&rsquo;t be too much of a hassle:</p>\r\n\r\n<ol>\r\n\t<li>Download&nbsp;<code>pyenv-win</code>&nbsp;ZIP-archive:&nbsp;<a href=\"https://github.com/pyenv-win/pyenv-win/archive/master.zip\">pyenv-win</a></li>\r\n\t<li>Create a new folder&nbsp;<code>.pyenv</code>&nbsp;in your user folder with the name&nbsp;<code>.pyenv</code>. You can do this using the Explorer or the following PowerShell command:\r\n\t<table>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code> mkdir $HOME/.pyenv\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\t</li>\r\n\t<li>Extract the ZIP-archive and copy the&nbsp;<code>pyenv-win</code>&nbsp;folder and the&nbsp;<code>.version</code>&nbsp;file from the&nbsp;<code>pyenv-win-master</code>&nbsp;folder into the newly created&nbsp;<code>.pyenv</code>&nbsp;folder in your user folder.</li>\r\n\t<li>Set the environment variables&nbsp;<code>PYENV</code>&nbsp;and&nbsp;<code>PYENV_HOME</code>&nbsp;that point to the installation folder:\r\n\t<table>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>1\r\n2\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>[System.Environment]::SetEnvironmentVariable('PYENV',$env:USERPROFILE + \"\\.pyenv\\pyenv-win\\\",\"User\")\r\n[System.Environment]::SetEnvironmentVariable('PYENV_HOME',$env:USERPROFILE + \"\\.pyenv\\pyenv-win\\\",\"User\")\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\t</li>\r\n\t<li>Add the&nbsp;<code>bin</code>&nbsp;folder to the&nbsp;<code>PATH</code>&nbsp;variable. Such that&nbsp;<code>pyenv</code>&nbsp;can be found when using the command line.\r\n\t<table>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>[System.Environment]::SetEnvironmentVariable('path', $env:USERPROFILE + \"\\.pyenv\\pyenv-win\\bin;\" + $env:USERPROFILE + \"\\.pyenv\\pyenv-win\\shims;\" + [System.Environment]::GetEnvironmentVariable('path', \"User\"),\"User\")\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\t</li>\r\n\t<li>Close the current PowerShell.</li>\r\n\t<li>If you haven&rsquo;t enabled script execution yet, start a new PowerShell with admin privileges by right-clicking on the PowerShell icon in the start menu and choose&nbsp;<em>Run as administrator</em>. Otherwise, skip ahead to step 9.&nbsp;<img alt=\"Run PowerShell as administrator\" src=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/run_powershell_as_admin.PNG\" /></li>\r\n\t<li>Enter the following command into the PowerShell to enable the execution of scripts:\r\n\t<table>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code> Set-ExecutionPolicy unrestricted\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\r\n\t<p>And press&nbsp;<code>A</code>&nbsp;to choose&nbsp;<em>Yes to ALL</em>. Afterward, you can close this PowerShell window and open a new one without admin privileges.&nbsp;<a href=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/set_powershell_execution_policy.PNG\" title=\"\"><img alt=\"Set PowerShell execution policy\" src=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/set_powershell_execution_policy.PNG\" /></a></p>\r\n\t</li>\r\n\t<li>Now, you can run&nbsp;<code>pyenv</code>&nbsp;by entering:\r\n\t<table>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code> pyenv\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\r\n\t<p><a href=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/pyenv_help_in_powershell.PNG\" title=\"\"><img alt=\"Run pyenv help in the PowerShell\" src=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/pyenv_help_in_powershell.PNG\" /></a>&nbsp;If you encounter a security warning from where you have to choose if you want to run&nbsp;<code>pyenv</code>&nbsp;you can disable this warning by &ldquo;unblocking&rdquo; the pyenv script with the following command:</p>\r\n\r\n\t<table>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t<pre>\r\n<code> Unblock-File $HOME/.pyenv/pyenv-win/bin/pyenv.ps1\r\n</code></pre>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t</table>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Using pyenv</h2>\r\n\r\n<p>After you successfully installed&nbsp;<code>pyenv</code>&nbsp;it is time to look at the different commands that&nbsp;<code>pyenv</code>&nbsp;offers to manage different Python versions.</p>\r\n\r\n<p>Probably the most important command is:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>pyenv install [PYTHON_VERSION]\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>With this command, you can install a specific Python version on your system. To see all versions that are available to install enter:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>pyenv install -l\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>This will print out a very long list on your terminal (depending on your operating system) of Python versions you can install. And it is not just the standard CPython versions. There is also&nbsp;<a href=\"https://en.wikipedia.org/wiki/PyPy\"><code>pypy</code></a>, which is an implementation of Python in Python itself. Or&nbsp;<code>anaconda</code>, which is very popular in the sciences and data mining. Pick your preferred Python version and use&nbsp;<code>pyenv install</code>&nbsp;to install it on your system.</p>\r\n\r\n<p>To see which versions you already installed on, enter the following command into your terminal:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>pyenv versions\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>This command will list all the Python versions that you can choose from&nbsp;<code>pyenv</code>. The version that is currently active has an asterisk (<code>*</code>) in front of it:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>  system\r\n  3.10.0rc1\r\n* 3.9.6 (set by /home/konze/Programming/ml_acc_timing_model_extraction/.python-version)\r\n  pypy3.7-7.3.5\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>If you want to know which Python version is currently active in your shell, just type:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>pyenv version\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Now, after you installed several different versions, how do you set a specific version? To select a default Python version that is active when you open a new terminal, you use the&nbsp;<code>global</code>&nbsp;command:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>pyenv global [PYTHON_VERSION]\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Ensure to enter the exact name of the installed Python version shown when you enter&nbsp;<code>pyenv versions</code>. Alternatively to&nbsp;<code>pyenv global [PYTHON_VERSION]</code>, you can also set an environment variable (Unix only)&nbsp;<code>PYENV_VERSION</code>&nbsp;with:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>export PYENV_VERSION=[PYENV_VERSION]\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>If you want to set a specific Python version for your current terminal session, use:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>pyenv shell [PYTHON_VERSION]\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>This will set the Python version only as long as your session is active. So after you close your terminal, everything is back to default.</p>\r\n\r\n<p>To set a project Python version that is active as soon as you &ldquo;<code>cd</code>&rdquo; into the project directory, enter the following when you are inside of the project&rsquo;s root directory:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>pyenv local [PYTHON_VERSION]\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>This will create the file&nbsp;<code>.python-version</code>&nbsp;that contains the&nbsp;<code>[PYTHON_VERSION]</code>. You can even check that by entering&nbsp;<code>pyenv versions,</code>&nbsp;and it will tell you based on what setting the currently active Python version was selected.</p>\r\n\r\n<p>Of course, there are more&nbsp;<code>pyenv</code>&nbsp;commands, but I won&rsquo;t go into those in this article. You can find a complete command reference over here:&nbsp;<a href=\"https://github.com/pyenv/pyenv/blob/master/COMMANDS.md\">pyenv Command Reference</a>.</p>\r\n\r\n<h2>Creating Virtual Environments</h2>\r\n\r\n<p>The real power of Python comes from its vast amount of modules ranging from graph theory to machine learning. To install those modules, the&nbsp;<code>pip</code>&nbsp;command is used. If you are using&nbsp;<code>pyenv</code>&nbsp;and you enter pip:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>which pip\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>and for Windows PowerShell:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>get-command pip\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>It will show you that pip is called from the&nbsp;<code>.pyenv</code>&nbsp;directory. And if you install a module using&nbsp;<code>pip</code>&nbsp;it is installed into your&nbsp;<code>.pyenv</code>&nbsp;directory tied to the currently active version. So if you install&nbsp;<code>numpy</code>&nbsp;while your current Python version is 3.9.6&nbsp;<code>numpy</code>&nbsp;won&rsquo;t be available when you switch to&nbsp;<code>anaconda3-2021.05</code>. However, this granularity might not be enough, and you need a project-based distinction between different modules. And virtual environments do exactly that for you.</p>\r\n\r\n<p>To create a new virtual environment for your project, open a terminal in your project&rsquo;s root directory. Make sure you set your desired Python version for this project using&nbsp;<code>pyenv local [PYTHON_VERSION]</code>&nbsp;then enter:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>python -m venv .venv\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>This command will create a new directory&nbsp;<code>.venv</code>&nbsp;which includes the Python interpreter (provided by&nbsp;<code>pyenv</code>) and all the modules installed using&nbsp;<code>pip</code>&nbsp;later on. After creating the newly created virtual environment, you have to activate it. This is done by entering:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>source .venv/bin/activate\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>and for Windows PowerShell:</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>\".\\\\.venv\\\\Scripts\\\\activate\"\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>Now a&nbsp;<code>(.venv)</code>&nbsp;string will appear in front of your command line. After you activate the virtual environment, you can check with&nbsp;<code>which python</code>&nbsp;or&nbsp;<code>get-command python</code>&nbsp;that is now called from the&nbsp;<code>.venv</code>&nbsp;directory. And when you use&nbsp;<code>pip</code>, it also installs all modules into the&nbsp;<code>.venv</code>&nbsp;directory. In the rare case you messed up your virtual environment, you can delete the&nbsp;<code>.venv</code>&nbsp;directory and create a new one with&nbsp;<code>python -m venv .venv</code>.</p>\r\n\r\n<h2>&nbsp;</h2>\r\n\r\n<h2>Using Virtual Environments with VSCode</h2>\r\n\r\n<p>Now that you successfully installed&nbsp;<code>pyenv</code>&nbsp;and set up virtual environments, I will show you in this section how to tell VSCode to activate virtual environments by default for your Python projects.</p>\r\n\r\n<p>When you open your Python project directory with VSCode and create a virtual environment, it won&rsquo;t activate it by default. To do this, you have to open the workspace&nbsp;<code>settings.json</code>&nbsp;with&nbsp;<strong>Ctrl+Shift+P</strong>&nbsp;or&nbsp;<strong>Cmd+Shift+P</strong>&nbsp;on macOS and enter&nbsp;<strong>settings.json</strong>.</p>\r\n\r\n<p><a href=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/vscode_settings_json.PNG\" title=\"\"><img alt=\"Open Workspace settings.json\" src=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/vscode_settings_json.PNG\" /></a></p>\r\n\r\n<p>This will create a new file&nbsp;<code>.vscode/settings.json</code>&nbsp;in your project&rsquo;s root directory. When you now run your Python application, it will automatically activate your virtual environment. In the newly created&nbsp;<code>settings.json</code>&nbsp;enter the new value</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>1\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<code>\"python.terminal.activateEnvironment\": true\r\n</code></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><a href=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/vscode_activate_environment.PNG\" title=\"\"><img alt=\"Activate Environment\" src=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/vscode_activate_environment.PNG\" /></a></p>\r\n\r\n<p>And when you now run your Python program in VSCode it will automatically activate your virtual environment.</p>\r\n\r\n<p><a href=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/vscode_environment_automatically_activated.PNG\" title=\"\"><img alt=\"Run with virtual environment\" src=\"https://k0nze.dev/assets/posts/install-pyenv-venv-vscode/vscode_environment_automatically_activated.PNG\" /></a></p>",
        "author": 1,
        "slug": "pyenv",
        "published_date": "2022-01-24T16:42:37.564Z",
        "last_updated": "2022-01-24T16:42:37.564Z",
        "total_views": 0,
        "featured": false,
        "status": "published",
        "category": [],
        "views": [],
        "bookmarks": []
    }
},
{
    "model": "MArticles.acomment",
    "pk": 1,
    "fields": {
        "article": 19,
        "user": 1,
        "parent": null,
        "content": "Nice!",
        "commented_on": "2022-02-13T13:17:47.609Z",
        "status": true,
        "lft": 1,
        "rght": 2,
        "tree_id": 1,
        "level": 0
    }
},
{
    "model": "MArticles.acomment",
    "pk": 2,
    "fields": {
        "article": 21,
        "user": 1,
        "parent": null,
        "content": "Nice",
        "commented_on": "2022-02-13T13:20:33.969Z",
        "status": true,
        "lft": 1,
        "rght": 8,
        "tree_id": 2,
        "level": 0
    }
},
{
    "model": "MArticles.acomment",
    "pk": 3,
    "fields": {
        "article": 21,
        "user": 1,
        "parent": 2,
        "content": "gyjg",
        "commented_on": "2022-02-18T12:22:19.304Z",
        "status": true,
        "lft": 2,
        "rght": 3,
        "tree_id": 2,
        "level": 1
    }
},
{
    "model": "MArticles.acomment",
    "pk": 4,
    "fields": {
        "article": 21,
        "user": 1,
        "parent": 2,
        "content": "class based",
        "commented_on": "2022-03-14T11:23:58.812Z",
        "status": true,
        "lft": 4,
        "rght": 5,
        "tree_id": 2,
        "level": 1
    }
},
{
    "model": "MArticles.acomment",
    "pk": 5,
    "fields": {
        "article": 21,
        "user": 1,
        "parent": 2,
        "content": "class based",
        "commented_on": "2022-03-14T11:24:39.351Z",
        "status": true,
        "lft": 6,
        "rght": 7,
        "tree_id": 2,
        "level": 1
    }
}
]
